<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation – Working with Document</title>
    <link>https://docs.aspose.com/pdf/net/working-with-document/</link>
    <description>Recent content in Working with Document on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.aspose.com/pdf/net/working-with-document/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: Create Document</title>
      <link>https://docs.aspose.com/pdf/net/create-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/create-document/</guid>
      <description>
        
        
        &lt;p&gt;Aspose.PDF for .NET API lets you create and read PDF files using C# and VB.NET. The API can be used in a variety of .NET applications including WinForms, ASP.NET, and several others. In this article, we are going to show how to use Aspose.PDF for .NET API to easily generate and read PDF files in .NET applications.&lt;/p&gt;
&lt;h2 id=&#34;how-to-create-pdf-file-using-c&#34;&gt;&lt;strong&gt;How to Create PDF File using C#&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To create a PDF file using C#, the following steps can be used.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an object of &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; class&lt;/li&gt;
&lt;li&gt;Add a &lt;a href=&#34;https://apireference.aspose.com/pdf/net/aspose.pdf/page&#34;&gt;Page&lt;/a&gt; object to the &lt;a href=&#34;https://apireference.aspose.com/pdf/net/aspose.pdf/document/properties/pages&#34;&gt;Pages&lt;/a&gt; collection of the Document object&lt;/li&gt;
&lt;li&gt;Add &lt;a href=&#34;https://apireference.aspose.com/pdf/net/aspose.pdf.text/textfragment&#34;&gt;TextFragment&lt;/a&gt; to &lt;a href=&#34;https://apireference.aspose.com/pdf/net/aspose.pdf/page/properties/paragraphs&#34;&gt;Paragraphs&lt;/a&gt; collection of the page&lt;/li&gt;
&lt;li&gt;Save the resultant PDF document&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-QuickStart-HelloWorld-1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this case, we create a PDF one-page document with A4 page size, portrait orientation. Our page will contain a &amp;ldquo;Hello, World&amp;rdquo; in the upper left part of the page.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Formatting PDF Document</title>
      <link>https://docs.aspose.com/pdf/net/formatting-pdf-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/formatting-pdf-document/</guid>
      <description>
        
        
        &lt;h2 id=&#34;get-document-window-and-page-display-properties&#34;&gt;&lt;strong&gt;Get Document Window and Page Display Properties&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This topic helps you understand how to get properties of the document window, viewer application, and how pages are displayed. To set these properties:&lt;/p&gt;
&lt;p&gt;Open the PDF file using the Document class. Now, you can set the Document object&amp;rsquo;s properties, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CenterWindow – Center the document window on the screen. Default: false.&lt;/li&gt;
&lt;li&gt;Direction – Reading order. This determines how pages are laid out when displayed side by side. Default: left to right.&lt;/li&gt;
&lt;li&gt;DisplayDocTitle – Display the document title in the document window title bar. Default: false (the title is displayed).&lt;/li&gt;
&lt;li&gt;HideMenuBar -– Hide or display the document window&amp;rsquo;s menu bar. Default: false (menu bar is displayed).&lt;/li&gt;
&lt;li&gt;HideToolBar -– Hide or display the document window&amp;rsquo;s toolbar. Default: false (toolbar is displayed).&lt;/li&gt;
&lt;li&gt;HideWindowUI -– Hide or display document window elements like scroll bars. Default: false (UI elements are displayed).&lt;/li&gt;
&lt;li&gt;NonFullScreenPageMode -– How the document when it&amp;rsquo;s not displayed in full-page mode.&lt;/li&gt;
&lt;li&gt;PageLayout -– The page layout.&lt;/li&gt;
&lt;li&gt;PageMode -– How the document is displayed when first opened. The options are show thumbnails, full-screen, show attachment panel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following code snippet shows you how to get the properties using Document class.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-GetDocumentWindow-GetDocumentWindow.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;set-document-window-and-page-display-properties&#34;&gt;&lt;strong&gt;Set Document Window and Page Display Properties&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This topic explains how to set the properties of the document window, viewer application, and page display. To set these different properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the PDF file using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;Set the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; object&amp;rsquo;s properties.&lt;/li&gt;
&lt;li&gt;Save the updated PDF file using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/methods/save&#34;&gt;Save&lt;/a&gt; method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Properties available are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CenterWindow&lt;/li&gt;
&lt;li&gt;Direction&lt;/li&gt;
&lt;li&gt;DisplayDocTitle&lt;/li&gt;
&lt;li&gt;FitWindow&lt;/li&gt;
&lt;li&gt;HideMenuBar&lt;/li&gt;
&lt;li&gt;HideToolBar&lt;/li&gt;
&lt;li&gt;HideWindowUI&lt;/li&gt;
&lt;li&gt;NonFullScreenPageMode&lt;/li&gt;
&lt;li&gt;PageLayout&lt;/li&gt;
&lt;li&gt;PageMode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each is used and described in the code below. The following code snippet shows you how to set the properties using the Document class.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-SetDocumentWindow-SetDocumentWindow.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;embedding-fonts-in-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Embedding Fonts in an existing PDF file&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;PDF readers support &lt;a href=&#34;http://en.wikipedia.org/wiki/Portable_Document_Format#Text&#34;&gt;a core of 14 fonts&lt;/a&gt; so that documents can be displayed the same way regardless of the platform the document is displayed on. When a PDF contains a font that is not one of the 14 core fonts, embed the font to the PDF file to avoid font substitution.&lt;/p&gt;
&lt;p&gt;Aspose.PDF for .NET supports font embedding in existing PDF files. You can embed a complete font or a subset of the font. To embed the font, open the PDF file using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; class. Then use the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.text/&#34;&gt;Aspose.Pdf.Text.Font&lt;/a&gt; class to embed the font into the PDF file. To embed the full font, use the Font class&amp;rsquo; IsEmbeded property; to use a subset of the font, use the IsSubset property.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

A font subset embeds only the characters that are used and is useful where fonts are used for short sentences or slogans, for example where a corporate font is used for a logo, but not for the body text. Using a subset reduces the file size of the output PDF. However, if a custom font is used for the body text, embed it in its entirety.
&lt;/div&gt;

&lt;p&gt;The following code snippet shows how to embed a font in a PDF file.&lt;/p&gt;
&lt;h3 id=&#34;embedding-standard-type-1-fonts&#34;&gt;&lt;strong&gt;Embedding Standard Type 1 Fonts&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Some PDF documents have fonts from a special Adobe font set. Fonts from this set are called &amp;ldquo;Standard Type 1 Fonts&amp;rdquo;. This set includes 14 fonts and embedding this type of fonts requires using of special flags i.e &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/properties/embedstandardfonts&#34;&gt;Aspose.Pdf.Document.EmbedStandardFonts&lt;/a&gt;. Following is the code snippet which can be used to get a document with all fonts embedded including Standard Type 1 Fonts:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-EmbedStandardType1Fonts-1.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;embedding-fonts-while-creating-pdf&#34;&gt;&lt;strong&gt;Embedding Fonts while creating PDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you need to use any font other than the 14 core fonts supported by Adobe Reader, you must embed the font description while generating the Pdf file. If font information is not embedded, Adobe Reader will take it from the Operating System if it’s installed over the system, or it will construct a substitute font according to the font descriptor in the Pdf.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Please note the embedded font must be installed on the host machine i.e. in case of the following code ‘Univers Condensed’ font is installed over the system.
&lt;/div&gt;

&lt;p&gt;We use the property IsEmbedded of Font class to embed the font information into Pdf file. Setting the value of this property to ‘True’ will embed the complete font file into the Pdf, knowing the fact that it will increase the Pdf file size. Following is the code snippet that can be used to embed the font information into Pdf.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-EmbedFontWhileDocCreation-EmbedFontWhileDocCreation.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;set-default-font-name-while-saving-pdf&#34;&gt;&lt;strong&gt;Set Default Font Name while Saving PDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;When a PDF document contains fonts, which are not available in the document itself and on the device, API replaces these fonts with the default font. When font is available (is installed on the device or is embedded into the document), output PDF should have the same font (should not be replaced with default font). The value of the default font should contain the name of the font (not the path to the font files). We have implemented a feature to set default font name while saving a document as PDF. Following code snippet can be used to set default font:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-SetDefaultFont-1.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-all-fonts-from-pdf-document&#34;&gt;&lt;strong&gt;Get All Fonts from PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In case you want to get all fonts from a PDF document, you can use &lt;strong&gt;FontUtilities.GetAllFonts()&lt;/strong&gt; method provided in &lt;strong&gt;Document&lt;/strong&gt; class. Please check following code snippet in order to get all fonts from an existing PDF document:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-GetAllFonts-1.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-warnings-for-font-substitution&#34;&gt;&lt;strong&gt;Get Warnings for Font Substitution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET provides methods to get notifications about font substitution for handling font substitution cases. The code snippets below show how to use corresponding functionality.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-GetWarningsForFontSubstitution-GetWarningsForFontSubstitution.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt; &lt;/code&gt;The &lt;strong&gt;OnFontSubstitution&lt;/strong&gt; method is as listed below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-GetWarningsForFontSubstitution-OnFontSubstitution.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;improve-fonts-embedding-using-fontsubsetstrategy&#34;&gt;&lt;strong&gt;Improve Fonts Embedding using FontSubsetStrategy&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The feature to embed the fonts as a subset can be accomplished by using the IsSubset property, but sometimes you want to reduce a fully embedded font set to only subsets that are used in the document. Aspose.Pdf.Document has property FontUtilities which includes method SubsetFonts(FontSubsetStrategy subsetStrategy). In the method SubsetFonts(), the parameter subsetStrategy helps to tune the subset strategy. FontSubsetStrategy supports two following variants of font subsetting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SubsetAllFonts - This will subset all fonts, used in a document.&lt;/li&gt;
&lt;li&gt;SubsetEmbeddedFontsOnly - This will subset only those fonts which are fully embedded into the document.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following code snippet shows how to set FontSubsetStrategy:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-EmbedFontsUsingSubsetStrategy-EmbedFontsUsingSubsetStrategy.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-set-zoom-factor-of-pdf-file&#34;&gt;&lt;strong&gt;Get-Set Zoom Factor of PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you want to determine what a PDF document&amp;rsquo;s current zoom factor is. With Aspose.Pdf, you can find out the current value as well as set one.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.annotations/gotoaction&#34;&gt;GoToAction&lt;/a&gt; class&amp;rsquo; Destination property allows you to get the zoom value associated with a PDF file. Similarly, it can be used to set a file&amp;rsquo;s zoom factor.&lt;/p&gt;
&lt;h3 id=&#34;set-zoom-factor&#34;&gt;&lt;strong&gt;Set Zoom factor&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following code snippet shows how to set the zoom factor of a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-SetZoomFactor-SetZoomFactor.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;get-zoom-factor&#34;&gt;&lt;strong&gt;Get Zoom Factor&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following code snippet shows how to get a PDF file&amp;rsquo;s zoom factor.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-GetZoomFactor-GetZoomFactor.cs&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Please note that before you try to get the zoom value of PDF file, ensure that zoom factor is assigned to PDF file, else you will get an exception.
&lt;/div&gt;

&lt;h2 id=&#34;trim-whitespace-around-a-page&#34;&gt;&lt;strong&gt;Trim Whitespace Around a Page&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A PDF file is comprised of text, images, graphics and various other objects. To remove or trim the white space around a PDF page, set the CropBox for that particular page. To determine the correct value of the CropBox coordinates, first you need to identify the position of objects on the page.&lt;/p&gt;
&lt;p&gt;The graphics primitives boundary detection is not a reliable approach. It is highly probable that some objects can&amp;rsquo;t be found in facades and provide the API to get their rectangle. A better, reliable approach is to render the PDF page to an image and then determine the margins. The following code snippets show how to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Render a PDF page to PNG,&lt;/li&gt;
&lt;li&gt;determine the objects&amp;rsquo; location, and&lt;/li&gt;
&lt;li&gt;use those same values to set a CropBox for PDF file.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-TrimWhiteSpace-TrimWhiteSpace.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;setting-print-dialog-preset-properties&#34;&gt;&lt;strong&gt;Setting Print Dialog Preset Properties&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspoose.PDF allows setting the Print Dialog Preset properties of a PDF document. It allows you to change the DuplexMode property for a PDF document which is set to simplex by default. This can be achieved using two different methodologies as shown below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-SetPropertiesForPrintDialog-SetPresetPropertiesForPrintDialog.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;setting-print-dialog-preset-properties-using-pdf-content-editor&#34;&gt;&lt;strong&gt;Setting Print Dialog Preset Properties using PDF Content Editor&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-SetPropertiesForPrintDialog-SetPrintDlgPropertiesUsingPdfContentEditor.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Manipulate PDF Document</title>
      <link>https://docs.aspose.com/pdf/net/manipulate-pdf-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/manipulate-pdf-document/</guid>
      <description>
        
        
        &lt;h2 id=&#34;validate-pdf-document-for-pdf-a-standard-a-1a-and-a-1b&#34;&gt;&lt;strong&gt;Validate PDF Document for PDF A Standard (A 1A and A 1B)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To validate a PDF document for PDF/A-1a or PDF/A-1b compatibility, use the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; class Validate method. This method allows you to specify the name of the file in which the result is to be saved and the required validation type &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/pdfformat&#34;&gt;PdfFormat&lt;/a&gt; enumeration : PDF_A_1A or PDF_A_1B.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

The output XML format is custom Aspose format. The XML contains a collection of tags with the name Problem; each tag contains the details of a particular problem. The Problem tag&amp;rsquo;s ObjectID attribute represents the ID of the particular object this problem is related to. The Clause attribute represents a corresponding rule in the PDF specification.
&lt;/div&gt;

&lt;p&gt;The following code snippet shows you how to validate PDF document for PDF/A-1A.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-ValidatePDFAStandard-ValidatePDFAStandard.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The following code snippet shows you how to validate PDF document for PDF/A-1b.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-ValidatePDFABStandard-ValidatePDFABStandard.cs&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Aspose.PDF for .NET can be used to determine if the loaded document is a valid PDF and also &lt;a href=&#34;http://www.aspose.com/docs/display/pdfnet/How+to+-+determine+if+the+source+PDF+is+password+protected&#34;&gt;if its encrypted or not&lt;/a&gt;. In order to further extend the capabilities of Document class, &lt;strong&gt;IsPdfaCompliant&lt;/strong&gt; property is added to determine if the input file is PDF/A compliant and a property named &lt;strong&gt;PdfaFormat&lt;/strong&gt; to identify the PDF/A format are introduced.
&lt;/div&gt;

&lt;h2 id=&#34;working-with-toc&#34;&gt;&lt;strong&gt;Working with TOC&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;add-toc-to-existing-pdf&#34;&gt;&lt;strong&gt;Add TOC to Existing PDF&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Aspose.PDF API allows you to add a table of content either when creating a PDF, or to an existing file. The ListSection class in the Aspose.Pdf.Generator namespace allows you to create a table of contents when creating a PDF from scratch. To add headings, which are elements of the TOC, use the Aspose.Pdf.Generator.Heading class.&lt;/p&gt;
&lt;p&gt;To add a TOC to an existing PDF file, use the Heading class in the Aspose.Pdf namespace. The Aspose.Pdf namespace can both create new and manipulate existing PDF files. To add a TOC to an existing PDF, use the Aspose.Pdf namespace. The following code snippet shows how to create a table of contents inside an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-AddTOC-AddTOC.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;set-different-tableadertype-for-different-toc-levels&#34;&gt;&lt;strong&gt;Set different TabLeaderType for different TOC Levels&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Aspose.PDF also allows setting different TabLeaderType for different TOC levels. You need to set LineDash property of FormatArray with the appropriate value of TabLeaderType enum as following.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;outFile&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;TOC.pdf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Pdf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Document&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;doc&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Pdf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Document&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;Page&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tocPage&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Pages&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;TocInfo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//set LeaderType
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;LineDash&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TabLeaderType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Solid&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;TextFragment&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TextFragment&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Table Of Contents&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FontSize&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Title&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//Add the list section to the sections collection of the Pdf document
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;tocPage&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TocInfo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//Define the format of the four levels list by setting the left margins
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//and
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//text format settings of each level
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArrayLength&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;LineDash&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TabLeaderType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Dot&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FontStyle&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FontStyles&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Bold&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FontStyles&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Italic&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;LineDash&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TabLeaderType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FontSize&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FontStyle&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FontStyles&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Bold&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;LineDash&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TabLeaderType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Solid&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Margin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;tocInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FormatArray&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FontStyle&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FontStyles&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Bold&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//Create a section in the Pdf document
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Page&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Pages&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//Add four headings in the section
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Level&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Level&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Level&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++)&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt; 

    &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Pdf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Heading&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;heading2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Pdf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Heading&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Level&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;TextSegment&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;segment2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TextSegment&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;heading2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Segments&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;segment2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;heading2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;IsAutoSequence&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;heading2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TocPage&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tocPage&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;segment2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Sample Heading&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Level&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;heading2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Font&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FontRepository&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;FindFont&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Arial Unicode MS&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//Add the heading into Table Of Contents.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;heading2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;IsInList&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Paragraphs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;heading2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// save the Pdf
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Save&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;outFile&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;hide-page-numbers-in-toc&#34;&gt;&lt;strong&gt;Hide Page Numbers in TOC&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In case if you do not want to display page numbers, along with the headings in TOC, you can use &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/tocinfo/properties/isshowpagenumbers&#34;&gt;IsShowPageNumbers&lt;/a&gt; property of &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/tocinfo/&#34;&gt;TOCInfo&lt;/a&gt; Class as false. Please check following code snippet to hide page numbers in the table of contents:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-HidePageNumbersInTOC-1.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;customize-page-numbers-while-adding-toc&#34;&gt;&lt;strong&gt;Customize Page Numbers while adding TOC&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It is common to customize the page numbering in the TOC while adding TOC in a PDF document. For example, we may need to add some prefix before page number like P1, P2, P3 and so on. In such a case, Aspose.PDF for .NET provides PageNumbersPrefix property of TocInfo class that can be used to customize page numbers as shown in the following code sample.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-CustomizePageNumbesWhileAddingTOC-CustomizePageNumbesWhileAddingTOC.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;how-to-set-pdf-expiry-date&#34;&gt;&lt;strong&gt;How to set PDF expiry date&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We apply access privileges on PDF files so that a certain group of users can access particular features/objects of PDF documents. In order to restrict the PDF file access, we usually apply encryption and we may have a requirement to set PDF file expiration, so that the user accessing/viewing the document gets a valid prompt regarding PDF file expiry.&lt;/p&gt;
&lt;p&gt;In order to accomplish the above stated requirement, we can use &lt;strong&gt;JavascriptAction&lt;/strong&gt; object. Please take a look over the following code snippet.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-SetExpiryDate-SetExpiryDate.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;determine-progress-of-pdf-file-generation&#34;&gt;&lt;strong&gt;Determine Progress of PDF File Generation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A customer asked us to add a feature that allows developers to determine the progress of PDF file generation. Here&amp;rsquo;s the response to that request.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/docsaveoptions&#34;&gt;DocSaveOptions&lt;/a&gt; class CustomerProgressHandler allows you to determine how PDF generation is going. The handler has the following types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DocSaveOptions.ConversionProgessEventHandler&lt;/li&gt;
&lt;li&gt;DocSaveOptions.ProgressEventHandlerInfo&lt;/li&gt;
&lt;li&gt;DocSaveOptions.ProgressEventType)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code snippets below shows how to use CustomerProgressHandler.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-DetermineProgress-DetermineProgress.cs&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-DetermineProgress-ShowProgressOnConsole.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Optimize PDF Document</title>
      <link>https://docs.aspose.com/pdf/net/optimize-pdf-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/optimize-pdf-document/</guid>
      <description>
        
        
        &lt;h2 id=&#34;optimize-pdf-document&#34;&gt;&lt;strong&gt;Optimize PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A PDF document may sometimes contain additional data. Reducing the size of a PDF file will help you optimize network transfer and storage. This is especially handy for publishing on web pages, sharing on social networks, sending by e-mail, or archiving in storage. We can use several techniques to optimize PDF:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimize page content for online browsing&lt;/li&gt;
&lt;li&gt;Shrink or compress all images&lt;/li&gt;
&lt;li&gt;Enable reusing page content&lt;/li&gt;
&lt;li&gt;Merge duplicate streams&lt;/li&gt;
&lt;li&gt;Unembed fonts&lt;/li&gt;
&lt;li&gt;Remove unused objects &lt;/li&gt;
&lt;li&gt;Remove flattening form fields &lt;/li&gt;
&lt;li&gt;Remove or flatten annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;optimize-pdf-document-for-the-web&#34;&gt;&lt;strong&gt;Optimize PDF Document for the Web&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Optimization, or linearization for Web, refers to the process of making a PDF file suitable for online browsing using a web browser. To optimize a file for web display:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the input document in an &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; object.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/methods/optimize&#34;&gt;Optimize&lt;/a&gt; method.&lt;/li&gt;
&lt;li&gt;Save the optimized document using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/methods/save&#34;&gt;Save&lt;/a&gt; method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following code snippet shows how to optimize a PDF document for the web.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-OptimizeDocument-OptimizeDocument.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;optimize-pdf-file-size&#34;&gt;&lt;strong&gt;Optimize PDF File Size&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/methods/optimizeresources&#34;&gt;OptimizeResources()&lt;/a&gt; method allows you to reduce the document size by weeding out the unnecessary information. By default, this method works as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resources that are not used on the document pages are removed &lt;/li&gt;
&lt;li&gt;Equal resources are joined into one object&lt;/li&gt;
&lt;li&gt;Unused objects are deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The snippet below is an example. Note, though, that this method cannot guarantee document shrinking.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-ShrinkDocuments-ShrinkDocuments.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;optimization-strategy-management&#34;&gt;&lt;strong&gt;Optimization Strategy Management&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We can also customize the optimization strategy. Currently, the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.document/optimizeresources/methods/1&#34;&gt;OptimizeResources()&lt;/a&gt; method uses 5 techniques. These techniques can be applied using the OptimizeResources() method with the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.optimization/optimizationoptions&#34;&gt;OptimizationOptions&lt;/a&gt; parameter.&lt;/p&gt;
&lt;h3 id=&#34;shrinking-or-compressing-all-images&#34;&gt;&lt;strong&gt;Shrinking or Compressing All Images&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We have two ways to work with images: reduce image quality and/or change their resolution. In any case, &lt;strong&gt;ImageCompressionOptions&lt;/strong&gt; should be applied. In the following example, we shrink images by reducing &lt;strong&gt;ImageQuality&lt;/strong&gt; to 50.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Images-ShrinkImages-ShrinkImages.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Another way is to resize the images with a lower resolution. In this case, we should set ResizeImages to true and MaxResolution to the appropriate value.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Images-ResizeImages-ResizeImages.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Another important issue is the execution time. But again, we can manage this setting too. Currently, we can use two algorithms - Standard and Fast. To control the execution time we should set a &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.optimization/imagecompressionoptions/properties/version&#34;&gt;Version&lt;/a&gt; property. The following snippet demonstrates the Fast algorithm:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Images-FastShrinkImages-FastShrinkImages.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;removing-unused-objects&#34;&gt;&lt;strong&gt;Removing Unused Objects&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A PDF document sometimes contains the PDF objects that are not referenced from any other object in the document. This may happen, for example, when a page is removed from the document page tree but the page object itself isn&amp;rsquo;t removed. Removing these objects doesn&amp;rsquo;t make the document invalid but rather shrinks it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-RemoveUnusedObjects-RemoveUnusedObjects.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;removing-unused-streams&#34;&gt;&lt;strong&gt;Removing Unused Streams&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes the document contains the unused resource streams. These streams are not &amp;ldquo;unused objects&amp;rdquo; because they are referenced from a page resource dictionary. Thus, they are not removed with a &amp;ldquo;remove unused objects&amp;rdquo; method. But these streams are never used with the page contents. This may happen in cases when an image has been removed from the page but not from the page resources. Also, this situation often occurs when pages are extracted from the document and document pages have &amp;ldquo;common&amp;rdquo; resources, that is, the same Resources object. Page contents are analyzed in order to determine if a resource stream is used or not. Unused streams are removed. It sometimes decreases the document size. The use of this technique is similar to the previous step:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-RemoveUnusedStreams-RemoveUnusedStreams.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;linking-duplicate-streams&#34;&gt;&lt;strong&gt;Linking Duplicate Streams&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Some documents can contain several identical resource streams (like images, for instance). This may happen, say when a document is concatenated with itself. The output document contains two independent copies of the same resource stream. We analyze all resource streams and compare them. If streams are duplicated, they are merged, that is, only one copy is left. The references are changed appropriately, and the copies of the object are removed. In some cases, it helps to decrease the document size.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-LinkDuplicateStreams-LinkDuplicateStreams.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Additionally, we can use &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.optimization/optimizationoptions/properties/allowreusepagecontent&#34;&gt;AllowReusePageContent&lt;/a&gt; settings. If this property is set to true, the page content will be reused when optimizing the document for identical pages.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-AllowResusePageContent-AllowResusePageContent.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;unembedding-fonts&#34;&gt;&lt;strong&gt;Unembedding Fonts&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If the document uses embedded fonts, it means that all font data is stored in the document. The advantage is that the document is viewable regardless of whether the font is installed on the user&amp;rsquo;s machine or not. But embedding fonts makes the document larger. The unembed fonts method removes all embedded fonts. Thus, the document size decreases but the document itself may become unreadable if the correct font is not installed.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-UnembedFonts-UnembedFonts.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The optimization resources apply these methods to the document. If any of these methods are applied, the document size will most probably decrease. If none of these methods is applied, the document size will not change which is obvious.&lt;/p&gt;
&lt;h2 id=&#34;additional-ways-to-reduce-the-pdf-document-size&#34;&gt;&lt;strong&gt;Additional Ways to Reduce the PDF Document Size&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;removing-or-flattening-annotations&#34;&gt;&lt;strong&gt;Removing or Flattening Annotations&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Annotations can be deleted when they are unnecessary. When they are needed but do not require additional editing, they can be flattened. Both of these techniques will reduce the file size.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Working-Document-FlattenAnnotation-FlattenAnnotation.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;removing-form-fields&#34;&gt;&lt;strong&gt;Removing Form Fields&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If the PDF document contains AcroForms, we can try to reduce the file size by flattening form fields.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Forms-FlattenForms-FlattenForms.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;convert-a-pdf-from-rgb-colorspace-to-grayscale&#34;&gt;&lt;strong&gt;Convert a PDF from RGB colorspace to grayscale&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A PDF file comprises Text, Image, Attachment, Annotations, Graphs, and other objects. You may come across a requirement to convert a PDF from RGB colorspace to grayscale so that it would be faster while printing those PDF files. Also, when the file is converted to grayscale, the document size is reduced too, but it can just as well cause a decrease in the document quality. This feature is currently supported by the Pre-Flight feature of Adobe Acrobat, but when talking about Office automation, Aspose.PDF is an ultimate solution to provide such leverages for document manipulations. In order to accomplish this requirement, the following code snippet can be used.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-ConvertFromRGBToGrayscale-ConvertFromRGBToGrayscale.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: PDF File Metadata</title>
      <link>https://docs.aspose.com/pdf/net/pdf-file-metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/pdf-file-metadata/</guid>
      <description>
        
        
        &lt;h2 id=&#34;get-pdf-file-information&#34;&gt;&lt;strong&gt;Get PDF File Information&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to get file specific information of a PDF file, you first need to get the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/documentinfo&#34;&gt;DocumentInfo&lt;/a&gt; object using &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/properties/info&#34;&gt;Info&lt;/a&gt; property of the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; object. Once the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/documentinfo&#34;&gt;DocumentInfo&lt;/a&gt; object is retrieved, you can get the values of the individual properties. The following code snippet shows you how to get PDF file information.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-GetFileInfo-GetFileInfo.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;set-pdf-file-information&#34;&gt;&lt;strong&gt;Set PDF File Information&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET allows you to set file-specific information for a PDF, information like author, creation date, subject, and title. To set this information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/documentinfo&#34;&gt;DocumentInfo&lt;/a&gt; object.&lt;/li&gt;
&lt;li&gt;Set the values of the properties.&lt;/li&gt;
&lt;li&gt;Save the updated document using the Document class&amp;rsquo; Save method.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Please note that you cannot set values against the &lt;strong&gt;Application&lt;/strong&gt; and &lt;strong&gt;Producer&lt;/strong&gt; fields, because Aspose Ltd. and Aspose.PDF for .NET x.x.x will be displayed against these fields.
&lt;/div&gt;

&lt;p&gt;The following code snippet shows you how to set PDF file information.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-SetFileInfo-SetFileInfo.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-xmp-metadata-from-pdf-file&#34;&gt;&lt;strong&gt;Get XMP Metadata from PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF allows you to access a PDF file&amp;rsquo;s XMP metadata. To get a PDF file&amp;rsquo;s metadata:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; object and open the input PDF file.&lt;/li&gt;
&lt;li&gt;Get the file&amp;rsquo;s metadata using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/properties/metadata&#34;&gt;Metadata&lt;/a&gt; property.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following code snippet shows you how to get metadata from the PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-GetXMPMetadata-GetXMPMetadata.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;set-xmp-metadata-in-a-pdf-file&#34;&gt;&lt;strong&gt;Set XMP Metadata in a PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF allows you to set metadata in a PDF file. To set metadata:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; object.&lt;/li&gt;
&lt;li&gt;Set metadata values using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/properties/metadata&#34;&gt;Metadata&lt;/a&gt; property.&lt;/li&gt;
&lt;li&gt;Save the updated document using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document/methods/save&#34;&gt;Save&lt;/a&gt; method of the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/document&#34;&gt;Document&lt;/a&gt; object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following code snippet shows you how to set metadata in a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-SetXMPMetadata-SetXMPMetadata.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;insert-metadata-with-prefix&#34;&gt;&lt;strong&gt;Insert Metadata with Prefix&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Some developers need to create a new metadata namespace with a prefix. The following code snippet shows how to insert metadata with prefix.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Working-Document-SetXMPMetadata-SetPrefixMetadata.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
  </channel>
</rss>
