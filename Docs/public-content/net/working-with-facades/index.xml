<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation â€“ Working with Facades</title>
    <link>https://docs.aspose.com/pdf/net/working-with-facades/</link>
    <description>Recent content in Working with Facades on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.aspose.com/pdf/net/working-with-facades/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: Working with Text - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-text-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-text-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;replace-text-in-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Replace Text in an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to replace text in an existing PDF file, you need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind an input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you need to call &lt;strong&gt;ReplaceText&lt;/strong&gt; method. This overload of &lt;strong&gt;ReplaceText&lt;/strong&gt; method takes two arguments: source string (the string to replace) and destination string (the string to be replaced). You need to save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The following code snippet shows you how to replace text in an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Text-ReplaceText-ReplaceText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;replace-text-on-a-particular-page-in-an-existing-pdf-file-facades&#34;&gt;&lt;strong&gt;Replace Text on a Particular Page in an Existing PDF File (Facades)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PdfContentEditor&lt;/strong&gt; allows you to replace text on a particular page as well. In order to replace text on a particular page in an existing PDF file, you need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class, and bind an input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you need to call &lt;strong&gt;ReplaceText&lt;/strong&gt; method. This overload of &lt;strong&gt;ReplaceText&lt;/strong&gt; method takes three arguments: source string (the string to replace), page number (the page at which text needs to be replaced), and destination string (the string to be replaced). You need to save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The following code snippet shows you how to replace text on a particular page in an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Text-ReplaceTextPage-ReplaceTextPage.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-text-from-the-whole-pdf-file-facades&#34;&gt;&lt;strong&gt;Extract Text from the Whole PDF File (Facades)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PdfExtractor&lt;/strong&gt; class allows you to extract text from the whole PDF file. You need to create an object of &lt;strong&gt;PdfExtractor&lt;/strong&gt; class and bind the input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. &lt;strong&gt;ExtractText&lt;/strong&gt; method helps you extract all the text into the memory. However, in order to get the text, you need to use &lt;strong&gt;GetText&lt;/strong&gt; method. The following code snippet shows you how to extract text from the whole PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Text-ExtractText-ExtractText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-text-from-a-range-of-pages-facades&#34;&gt;&lt;strong&gt;Extract Text from a Range of Pages (Facades)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can use &lt;strong&gt;PdfExtractor&lt;/strong&gt; class to extract text from a range of pages. First of all, you need to create a &lt;strong&gt;PdfExtractor&lt;/strong&gt; object and bind the PDF file. After that, you need to set &lt;strong&gt;StartPage&lt;/strong&gt; and &lt;strong&gt;EndPage&lt;/strong&gt; properties to specify the range from which the text needs to be extracted. Finally, you need to extract all the text into memory using &lt;strong&gt;ExtractText&lt;/strong&gt; method and then get the extracted text using &lt;strong&gt;GetText&lt;/strong&gt; method. The following code snippet shows you how to extract text from a range of pages of a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Text-ExtractTextPageRange-ExtractTextPageRange.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-text-from-individual-pages-of-a-pdf-facades&#34;&gt;&lt;strong&gt;Extract Text from Individual Pages of a PDF (Facades)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to extract text from individual pages, you can use &lt;strong&gt;PdfExtractor&lt;/strong&gt; class. This class provides two methods &lt;strong&gt;HasNextPageText&lt;/strong&gt; and &lt;strong&gt;GetNextPageText&lt;/strong&gt; which help retrieve the text from individual pages. First, you need to create an object of &lt;strong&gt;PdfExtractor&lt;/strong&gt; class and bind the input PDF file. After that, you need to extract the text into memory using &lt;strong&gt;ExtractText&lt;/strong&gt; method. Finally, you have to navigate through all the pages using &lt;strong&gt;HasNextPageText&lt;/strong&gt; method and get the text of individual pages using &lt;strong&gt;GetNextPageText&lt;/strong&gt; method. The following code snippet shows you how to extract text from individual pages of a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Text-ExtractTextPage-ExtractTextPage.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;add-text-in-an-existing-pdf-file-facades&#34;&gt;&lt;strong&gt;Add Text in an Existing PDF File (Facades)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can use &lt;strong&gt;AddText&lt;/strong&gt; method of the &lt;strong&gt;PdfFileMend&lt;/strong&gt; class to add text in an existing PDF file. Before that, you need to create &lt;strong&gt;FormattedText&lt;/strong&gt; object, which contains the text and the formatting information. After that, you need to save the updated PDF file using &lt;strong&gt;Close&lt;/strong&gt; method. The following code snippet shows you how to add text in the PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Text-AddText-AddText.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Working with Images - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-images-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-images-facades/</guid>
      <description>
        
        
        &lt;h3 id=&#34;articles-in-this-section&#34;&gt;&lt;strong&gt;Articles in this section&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/add-and-delete-images/&#34;&gt;Add and Delete Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/convert-pdf-file/&#34;&gt;Convert PDF File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/replace-and-extract-images/&#34;&gt;Replace and Extract Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Working with Annotations - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-annotations-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-annotations-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;add-annotation-in-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Add Annotation in an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PdfContentEditor&lt;/strong&gt; allows you to add annotations of different types in an existing PDF file. You can use the respective method to add a particular annotation. For example, in the following code snippet, we have used &lt;strong&gt;CreateFreeText&lt;/strong&gt; method add &lt;strong&gt;FreeText&lt;/strong&gt; type annotation. Any type of annotations can be added to the PDF file in the same way. First of all, you need to create an object of type &lt;strong&gt;PdfContentEditor&lt;/strong&gt; and bind input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. Secondly, you have to create a Rectangle object to specify the area of the annotatation. After that, you can call &lt;strong&gt;CreateFreeText&lt;/strong&gt; method to add &lt;strong&gt;FreeText&lt;/strong&gt; annotation, and then use &lt;strong&gt;Save&lt;/strong&gt; method to save the updated PDF file.&lt;/p&gt;
&lt;h3 id=&#34;add-freetext-annotation&#34;&gt;&lt;strong&gt;Add FreeText Annotation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following code snippet shows you how to add an annotation in a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-AddFreeTextAnnotation-AddFreeTextAnnotation.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;create-file-annotation-without-icon&#34;&gt;&lt;strong&gt;Create File Annotation without Icon&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When adding a file annotation to PDF file, the createFileAttachment(..) method takes an argument to specify the icon that will be displayed for annotation. The values for Icon can be: &amp;ldquo;Graph&amp;rdquo;, &amp;ldquo;PushPin&amp;rdquo;, &amp;ldquo;Paperclip&amp;rdquo;, &amp;ldquo;Tag&amp;rdquo;. However if we need to add an annotation without an annotation, we can specify the opacity value for this icon (0 is complete transparent). Please try using the following code snippet to add a file annotation without any icon (in fact Icon is there but its transparent).&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-CreateFileAnnotation-CreateFileAnnotation.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;delete-all-annotations-from-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Delete All Annotations from an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; allows you delete all the annotations from the existing PDF file. First off, create a &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object and bind input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, call &lt;strong&gt;DeleteAnnotations&lt;/strong&gt; method to delete all the annotations from the file, and then use &lt;strong&gt;Save&lt;/strong&gt; method to save the updated PDF file. The following code snippet shows you how to delete all the annotations from the PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-DeleteAllAnnotations-DeleteAllAnnotations.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;delete-all-annotations-by-specified-type&#34;&gt;&lt;strong&gt;Delete All Annotations by Specified Type&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can use &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; class to delete all the annotations, by a specified annotation type, from the existing PDF file. In order to do that you need to create a &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object and bind input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, call &lt;strong&gt;DeleteAnnotations&lt;/strong&gt; method, with the string parameter, to delete all the annotations from the file; the string parameter represents the annotation type to be deleted. Finally, use &lt;strong&gt;Save&lt;/strong&gt; method to save the updated PDF file. The following code snippet shows you how to delete all annotations by specified annotation type.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-DeleteSpecificAnnotations-DeleteSpecificAnnotations.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;update-annotations-in-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Update Annotations in an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; class allows you to update annotation in an existing PDF file. First of all, create an object of &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; class and bind PDF file. After that, create an object of particular annotation type; for example, in the following code snippet, we have used &lt;strong&gt;FreeTextAnnotation&lt;/strong&gt; object. The type of annotation object will depend upon the fact that which annotation type you want to update. Once you have created an object of a specific annotation type, you need to call &lt;strong&gt;ModifyAnnotations&lt;/strong&gt; method. Finally, save the updated document using &lt;strong&gt;Save&lt;/strong&gt; method of &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; class. The following code snippet shows you how to update annotation in an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-UpdateAnnotations-UpdateAnnotations.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;import-annotations-from-xfdf-into-pdf-file&#34;&gt;&lt;strong&gt;Import Annotations from XFDF into PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ImportAnnotationFromXfdf&lt;/strong&gt; method allows you to import annotations to a PDF file. In order to import annotations, you need to create &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object and bind PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you need to create an enumeration of annotation types which you want to import to PDF file. You can then use &lt;strong&gt;ImportAnnotationFromXfdf&lt;/strong&gt; method to import the annotations. And finally, save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object. The following code snippet shows you how to import annotations from XFDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-ImportAnnotations-ImportAnnotations.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;export-annotations-from-pdf-file-to-xfdf&#34;&gt;&lt;strong&gt;Export Annotations from PDF File to XFDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;ExportAnnotationXfdf&lt;/strong&gt; method allows you to export annotations from a PDF file. In order to export annotations, you need to create &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object and bind PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you need to create an enumeration of annotation types which you want to export from PDF file. You can then use &lt;strong&gt;ExportAnnotationXfdf&lt;/strong&gt; method to import the annotations. And finally, save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object. The following code snippet shows you how to export annotations to XFDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-ExportAnnotations-ExportAnnotations.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-annotations-from-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Extract Annotations from an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ExtractAnnotations&lt;/strong&gt; method allows you to extract annotations from a PDF file. In order to extract annotations, you need to create &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object and bind PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you need to create an enumeration of annotation types which you want to extract from PDF file. You can then use &lt;strong&gt;Extract&lt;/strong&gt; &lt;strong&gt;Annotations&lt;/strong&gt; method to extract the annotations to an ArrayList. After that, you can loop through this list and get individual annotations. And finally, save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;PdfAnnotationEditor&lt;/strong&gt; object. The following code snippet shows you how to extract annotations from PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Annotations-ExtractAnnotations-ExtractAnnotations.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Working with Attachments - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-attachments-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-attachments-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;add-attachment-from-a-file-in-an-existing-pdf&#34;&gt;&lt;strong&gt;Add Attachment from a File in an Existing PDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can add an attachment in an existing PDF file using &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The attachment can be added from a file on the disk using the file path. You can add attachment using &lt;strong&gt;AddDocumentAttachment&lt;/strong&gt; method. This method takes two arguments: file path and attachment description. First, you need to open the existing PDF file and add the attachement into it. Then you can save the output PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt;. The following code snippet shows you how to add attachment from a file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Attachments-AddAttachment-AddAttachment.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;add-attachment-from-a-stream-in-an-existing-pdf&#34;&gt;&lt;strong&gt;Add Attachment from a Stream in an Existing PDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Attachment can be added in a PDF file from a stream â€“ FileStream or MemoryStream â€“ using &lt;strong&gt;AddDocumentAttachment&lt;/strong&gt; method. This method takes three arguments: stream, attachment name, and attachment description. In order to add attachment, you need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind the input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you can call &lt;strong&gt;AddDocumentAttachment&lt;/strong&gt; method to add the attachment. Finally, you can call Save method to save the updated PDF file. The following code snippet shows you how to add attachment from a Stream.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Attachments-AddAttachmentStream-AddAttachmentStream.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;delete-all-attachments-from-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Delete All Attachments from an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;DeleteAttachments&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class allows you to delete all the attachments from an existing PDF file. You need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, call the &lt;strong&gt;DeleteAttachments&lt;/strong&gt; method. Finally, you have to call &lt;strong&gt;Save&lt;/strong&gt; method to save the updated PDF file. The following code snippet shows you how to delete all attachments from an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Attachments-DeleteAllAttachments-DeleteAllAttachments.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-all-attachments-to-disk-from-existing-pdf-file&#34;&gt;&lt;strong&gt;Extract All Attachments to Disk from Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can extract all attachments, from a PDF file, to disk using &lt;strong&gt;GetAttachment&lt;/strong&gt; method. This method takes a single argument: the path to the location where the files to be saved. However, before calling &lt;strong&gt;GetAttachment&lt;/strong&gt; method, you need to create &lt;strong&gt;PdfExtractor&lt;/strong&gt; object and bind the input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. Also, you need to call &lt;strong&gt;ExtractAttachment&lt;/strong&gt; method. This method extracts the attachments to memory, which can be further retrieved using &lt;strong&gt;GetAttachment&lt;/strong&gt; method. The following code snippet shows you how to extract all attachments from existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Attachments-ExtractAllAttachments-ExtractAllAttachments.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-attachment-names-from-a-pdf-document&#34;&gt;&lt;strong&gt;Get Attachment Names from a PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GetAttachNames&lt;/strong&gt; method allows you to get the names of all the attachments in the PDF file. This method is provided by &lt;strong&gt;PdfExtractor&lt;/strong&gt; class. In order to get attachment names, you first need to create &lt;strong&gt;PdfExtractor&lt;/strong&gt; object and bind the input PDF file. After that, you need to call &lt;strong&gt;ExtractAttachment&lt;/strong&gt; method, and then call &lt;strong&gt;GetAttachnames&lt;/strong&gt; method. &lt;strong&gt;GetAttachnames&lt;/strong&gt; method returns IList object, and you may cast this object to ArrayList type. Finally, you can navigate through all of the attachment names. The following code snippet shows you how to get attachment names from the PDF document.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Attachments-GetAttachmentNames-GetAttachmentNames.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Working with Stamps and Watermarks - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-stamps-and-watermarks-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-stamps-and-watermarks-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;articles-in-this-section&#34;&gt;&lt;strong&gt;Articles in this section&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/add-pdf-page-stamp/&#34;&gt;Add PDF Page Stamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/add-text-and-image-stamp/&#34;&gt;Add Text and Image Stamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/extract-image-and-change-position-of-a-stamp/&#34;&gt;Extract Image and Change Position of a Stamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/manage-header-and-footer/&#34;&gt;Manage Header and Footer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Working with Links and Actions - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-links-and-actions-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-links-and-actions-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;create-application-link-in-existing-pdf-file&#34;&gt;&lt;strong&gt;Create Application Link in Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CreateApplicationLink&lt;/strong&gt; method allows you to add a link in a PDF file, which can be used to launch an external application. For example, in the following code, we have tried to create a link to a text file. When you click the link in the output PDF file, it will open the text file, using the text editor, on your computer. You can create an application link using &lt;strong&gt;CreateApplicationlink&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The &lt;strong&gt;CreateApplicationLink&lt;/strong&gt; method requires three arguments: a rectangle (to specify the location where link is to be added), the application to be launched, and the page number at which the link needs to be added. You also need to save the output PDF file using &lt;strong&gt;Save&lt;/strong&gt; method. The following code snippet shows you how to create an application link in a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Links-Actions-CreateAppLink-CreateAppLink.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;create-application-link-with-color-in-existing-pdf-file&#34;&gt;&lt;strong&gt;Create Application Link with Color in Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can use &lt;strong&gt;CreateApplicationLink&lt;/strong&gt; method to add a link, with the color, in a PDF file, which can be used to launch an external application. For example, in the following code, we have tried to create a link to a text file. When you click the link in the output PDF file, it will open the text file, using the text editor, on your computer. You can create an application link using &lt;strong&gt;CreateApplicationlink&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The &lt;strong&gt;CreateApplicationLink&lt;/strong&gt; method requires four arguments: a rectangle (to specify the location where link is to be added), the application to be launched, the page number at which the link needs to be added, and the color of the link. You also need to save the output PDF file using &lt;strong&gt;Save&lt;/strong&gt; method. The following code snippet shows you how to create an application link with color in a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Links-Actions-CreateAppLinkWithColor-CreateAppLinkWithColor.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;create-local-link-in-existing-pdf-file&#34;&gt;&lt;strong&gt;Create Local Link in Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CreateLocalLink&lt;/strong&gt; method allows you to create a link within the PDF file. This link can take you to the specified page number. The &lt;strong&gt;CreateLocalLink&lt;/strong&gt; method takes four arguments: a rectangle which specifies the area where link is to be added, the destination page number, the page number on which the link needs to be added, and a color attribute for the link. The following code snippet shows you how to create a local link in Existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Links-Actions-CreateLocalLink-CreateLocalLink.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;create-javascript-link-in-existing-pdf-file&#34;&gt;&lt;strong&gt;Create JavaScript Link in Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CreateJavaScriptLink&lt;/strong&gt; method allows you to create a link, in a PDF file, which helps execute JavaScript on a click. This method takes four arguments: the JavaScript code, a rectangle which specifies the area where link needs to be added, page number at which the link needs to be added, and color attribute. 
You need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind the input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you need to call &lt;strong&gt;CreateJavaScriptLink&lt;/strong&gt; method and finally save the updated PDF using &lt;strong&gt;Save&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The following code snippet shows you how to create a JavaScript link in Existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Links-Actions-CreateJSLink-CreateJSLink.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;remove-document-open-action-command-from-existing-pdf-file&#34;&gt;&lt;strong&gt;Remove Document Open Action Command from Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;RemoveDocumentOpenAction&lt;/strong&gt; method allows you to remove open action from the document. You may want to remove opening action when concatenating multiple documents that use explicit GoTo action on startup. For example, the second document contains the GoTo action, which takes you to the first page of this document. When you concatenate this document with other documents, the command executes and it takes you to the first page of the second document, instead of the first page of the concatenated document. In such scenarios, you may remove the open action command. 
You need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind the input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you need to call &lt;strong&gt;RemoveDocumentOptionAction&lt;/strong&gt; method. Finally, you have to save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method. The following code snippet shows you how to remove document open action command from PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Links-Actions-RemoveAction-RemoveAction.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;create-document-additional-action-in-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Create Document Additional Action in an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CreateDocumentAdditionalAction&lt;/strong&gt; method allows you to add additional actions, for PDF document events, in an existing PDF file. The document events include: &lt;strong&gt;DocumentOpen&lt;/strong&gt;, &lt;strong&gt;DocumentClose&lt;/strong&gt;, &lt;strong&gt;DocumentPrinted&lt;/strong&gt;, &lt;strong&gt;DocumentSaved&lt;/strong&gt;, &lt;strong&gt;DocumentWillPrint&lt;/strong&gt;, &lt;strong&gt;DocumentWillSave&lt;/strong&gt;. 
You need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you can call the &lt;strong&gt;AddDocumentAdditionalAction&lt;/strong&gt; method. This method requires two arguments: the document event to which the action needs to be attached, the JavaScript code. Finally, you have to save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The following code snippet shows you how add additional actions to an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Links-Actions-CreateDocAdditionalAction-CreateDocAdditionalAction.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;create-pdf-document-link-in-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Create PDF Document Link in an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CreatePdfDocumentLink&lt;/strong&gt; method allows you to add a link to a PDF file targeting a particular page. You need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. After that, you can call the &lt;strong&gt;AddPdfDocumentLink&lt;/strong&gt; method. This method requires four arguments: the rectangle where link needs to be added, path to the PDF file, page number of the PDF where this link is to be added, and the page of the PDF to open. Finally, you have to save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class. The following code snippet shows you how add PDF document link to an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Links-Actions-CreateDocLink-CreateDocLink.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Working with Bookmarks - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-bookmarks-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-bookmarks-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;articles-in-this-section&#34;&gt;&lt;strong&gt;Articles in this section&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/create-bookmarks/&#34;&gt;Create Bookmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/import-and-export-bookmarks/&#34;&gt;Import and Export Bookmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/update-delete-and-get-bookmarks/&#34;&gt;Update, Delete and Get Bookmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Working with Document - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-document-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-document-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;set-viewer-preference-of-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Set Viewer Preference of an existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ViewerPreference&lt;/strong&gt; class represents display modes of PDF files; for example, positioning the document window in the center of the screen, hiding viewer applicationâ€™s menu bar etc. &lt;strong&gt;ChangeViewerPreference&lt;/strong&gt; method in &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class allows you to change the viewer preference. In order to do that, you need to create an object of &lt;strong&gt;PdfContentEditor&lt;/strong&gt; class and bind the input PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. Ater that, you can call &lt;strong&gt;ChangeViewerPreference&lt;/strong&gt; method to set any preference. Finally, you have to save the updated PDF file using &lt;strong&gt;Save&lt;/strong&gt; method. The following code snippet shows you how to change viewer preference in an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-SetViewerPreference-SetViewerPreference.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;set-pdf-file-information&#34;&gt;&lt;strong&gt;Set PDF File Information&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PdfFileInfo&lt;/strong&gt; class allows you to set file specific information of a PDF file. You need to create an object of &lt;strong&gt;PdfFileInfo&lt;/strong&gt; class and then set different file specific properties like Author, Title, Keyword, and Creator etc. Finally, save the updated PDF file using &lt;strong&gt;SaveNewInfo&lt;/strong&gt; method of the &lt;strong&gt;PdfFileInfo&lt;/strong&gt; object. The following code snippet shows you how to set PDF file information.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-SetFileInfo-SetFileInfo.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-pdf-file-information&#34;&gt;&lt;strong&gt;Get PDF file information&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to get file specific information of a PDF file, you need to create an object of &lt;strong&gt;PdfFileInfo&lt;/strong&gt; class. After that, you can get values of the individual properties like Subject, Title, Keywords and Creator etc. The following code snippet shows you how to get PDF file information.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-GetFileInfo-GetFileInfo.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;set-xmp-metadata-of-an-existing-pdf&#34;&gt;&lt;strong&gt;Set XMP Metadata of an existing PDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to set XMP metadata in a PDF file, you need to create &lt;strong&gt;PdfXmpMetadata&lt;/strong&gt; object and bind the PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. You can use &lt;strong&gt;Add&lt;/strong&gt; method of the &lt;strong&gt;PdfXmpMetadata&lt;/strong&gt; class to add different properties. Finally, call the &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;PdfXmpMetadata&lt;/strong&gt; class. The following code snippet shows you how to add XMP metadata in a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-SetXMPMetadata-SetXMPMetadata.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-xmp-metadata-of-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Get XMP Metadata of an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to get XMP metadata from a PDF file, you need to create &lt;strong&gt;PdfXmpMetadata&lt;/strong&gt; object and bind the PDF file using &lt;strong&gt;BindPdf&lt;/strong&gt; method. You can pass specific XMP metadata properties to the &lt;strong&gt;PdfXmpMetadata&lt;/strong&gt; object to get their values. The following code snippet shows you how to get XMP metadata from a PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-GetXMPMetadata-GetXMPMetadata.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;page-break-in-existing-pdf&#34;&gt;&lt;strong&gt;Page Break in existing PDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As a default layout, the contents inside PDF files are added in Top-Left to Bottom-Right layout. Once the contents exceed beyond page bottom margin, the page break occurs. However you may come across a requirement to insert page break depending upon requirement. A method named AddPageBreak(&amp;hellip;) method is added in &lt;strong&gt;PdfFileEditor&lt;/strong&gt; class to accomplish this requirement.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public void AddPageBreak(Document src, Document dest, PageBreak[] pageBreaks)&lt;/li&gt;
&lt;li&gt;public void AddPageBreak(string src, string dest, PageBreak[] pageBreaks)&lt;/li&gt;
&lt;li&gt;public void AddPageBreak(Stream src, Stream dest, PageBreak[] pageBreaks)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;src is source document/path to document/stream with source document;&lt;/li&gt;
&lt;li&gt;dest is destination document/path where document will be saved/stream where document will be saved.;&lt;/li&gt;
&lt;li&gt;PageBreak is array of page break objects. It have two properties: index of page where page break must be placed and vertical position of the page break on the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example-1&#34;&gt;&lt;strong&gt;Example-1&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-PageBreak-PageBreak.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;example-2&#34;&gt;&lt;strong&gt;Example-2&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-PageBreak-PageBreakWithDestPath.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;example-3&#34;&gt;&lt;strong&gt;Example-3&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Working-Document-PageBreak-PageBreakWithStream.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Working with Pages - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-pages-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-pages-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;articles-in-this-section&#34;&gt;&lt;strong&gt;Articles in this section&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/append-pdf-files/&#34;&gt;Append PDF files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/concatenate-pdf-documents/&#34;&gt;Concatenate PDF documents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/delete-pdf-pages/&#34;&gt;Delete PDF pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/extract-pdf-pages/&#34;&gt;Extract PDF pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/insert-pdf-pages/&#34;&gt;Insert PDF pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/make-booklet-of-pdf/&#34;&gt;Make Booklet of PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/make-nup-of-pdf-files/&#34;&gt;Make NUp of PDF files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/manipulate-page-properties/&#34;&gt;Manipulate Page Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/split-pdf-pages/&#34;&gt;Split PDF pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Working with Security and Signatures - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-security-and-signatures-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-security-and-signatures-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;articles-in-this-section&#34;&gt;&lt;strong&gt;Articles in this section&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/encrypt-decrypt-and-set-privileges-on-pdf-file/&#34;&gt;Encrypt, Decrypt and Set Privileges on PDF File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/working-with-signature-in-a-pdf-file/&#34;&gt;Working with Signature in a PDF File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Working with Forms - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-forms-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-forms-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;articles-in-this-section&#34;&gt;&lt;strong&gt;Articles in this section&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/working-with-form-fields/&#34;&gt;Working with Form Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/working-with-list-item/&#34;&gt;Working with List Item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/get-button-option-value/&#34;&gt;Get Button Option Value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/set-submit-button-url-and-javascript-for-push-button/&#34;&gt;Set Submit Button URL and JavaScript for Push Button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/copy-inner-and-outer-field/&#34;&gt;Copy Inner and Outer Field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/import-and-export-data/&#34;&gt;Import and Export Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Working with PDF printing - Facades</title>
      <link>https://docs.aspose.com/pdf/net/working-with-pdf-printing-facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/working-with-pdf-printing-facades/</guid>
      <description>
        
        
        &lt;h2 id=&#34;printing-pdf-file-to-default-printer-using-printer-and-page-settings&#34;&gt;&lt;strong&gt;Printing PDF File to Default Printer using Printer and Page Settings&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.facades/pdfviewer&#34;&gt;PdfViewer&lt;/a&gt; class allows you to print a PDF file to the default printer. You need to create a PdfViewer object and open the PDF using the BindPdf method. To specify different print settings, use the PageSettings and PrinterSettings classes. Finally, call the PrintDocumentWithSettings method to print the PDF to the default printer. The following code snippet shows how to print PDF to the default printer with printer and page Settings.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintToDefaultPrinter-PrintToDefaultPrinter.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In order to display a print dialog, try using the following code snippet:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintToDefaultPrinter-PrintDialog.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;printing-pdf-to-an-xps-printer-facades&#34;&gt;&lt;strong&gt;Printing PDF to an XPS Printer (Facades)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can print a PDF file to an XPS printer, or some other soft printer for that matter, using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.facades/pdfviewer&#34;&gt;PdfViewer&lt;/a&gt; class. In order to do that, create an object of the PdfViewer class and open the PDF file using the BindPdf method. You can set different print settings using the PrinterSettings and PageSettings classes. You also need to set the PrinterName property to the XPS or other soft printer you have installed.&lt;/p&gt;
&lt;p&gt;Finally, use PrintDocumentWithSettings method to print the PDF to XPS or other soft printer. The following code snippet shows you how to print the PDF file to an XPS printer.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintoXPSPrinter-PrintoXPSPrinter.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;When printing a PDF files that contains text and you want the contents to appear as text instead of vector graphics, please try using the following code snippets.&lt;/p&gt;
&lt;h3 id=&#34;fonts-not-embedded&#34;&gt;&lt;strong&gt;Fonts not Embedded&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If the document does not contain embedded fonts, it is possible to embed system fonts into the document at the point of printing.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintoXPSPrinter-FontsNotEmbedded.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;fonts-embedded&#34;&gt;&lt;strong&gt;Fonts Embedded&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;For documents that have embedded fonts, the quality can be improved and fonts are embedded to the document. Aspose.PDF has a feature that allows you to substitute embedded fonts with system fonts.&lt;/p&gt;
&lt;h2 id=&#34;printing-pdf-to-an-xps-file-and-hiding-print-dialog&#34;&gt;&lt;strong&gt;Printing PDF to an XPS File and Hiding Print Dialog&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A PDF file can be printed to an XPS file, without showing any print dialog, using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.facades/pdfviewer&#34;&gt;PdfViewer&lt;/a&gt; class. In order to do that, create an object of the PdfViewer class and open the PDF file using the BindPdf method.&lt;/p&gt;
&lt;p&gt;You can set different print settings using the PrinterSettings and [PageSettings classes. You also need to set the PrinterName property to point to the XPS printer.&lt;/p&gt;
&lt;p&gt;Additionally, because you want to to print the PDF to an XPS file and hide the print dialog, set the PrintFileName and PrintToFile properties of the PrinterSettings class. Also set the PrintPageDialog property to false. Finally, use the PrintDocumentWithSettings method to print the PDF to XPS or another soft printer.&lt;/p&gt;
&lt;p&gt;The following code snippet shows you how to print the PDF file to an XPS file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintoXPSPrinter-HideDialgo.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;printing-color-pdf-to-xps-file-as-grayscale&#34;&gt;&lt;strong&gt;Printing Color PDF to XPS File as Grayscale&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A color PDF document can be printed to an XPS printer as grayscale, using &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.facades/pdfviewer&#34;&gt;PdfViewer&lt;/a&gt;. In order to achieve that you need to use the propertyÂ PdfViewer.PrintAsGrayscale and set it to &lt;em&gt;true&lt;/em&gt;. Following code snippet demonstrates the implementation of PdfViewer.PrintAsGrayscale Property.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;dataDir&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RunExamples&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;GetDataDir_AsposePdfFacades_Printing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Facades&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PdfViewer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;viewer&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Facades&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PdfViewer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;())&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;outputFile&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;dataDir&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;TestXPS_Out.xps&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;viewer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;BindPdf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dataDir&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;TestDoc_Colored.pdf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;viewer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrintPageDialog&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;viewer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrintAsGrayscale&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Drawing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Printing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrinterSettings&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ps&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Drawing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Printing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrinterSettings&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Drawing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Printing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PageSettings&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;pgs&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Drawing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Printing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PageSettings&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;ps&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrinterName&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Microsoft Print to PDF&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;ps&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrintFileName&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;outputFile&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;ps&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrintToFile&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;pgs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PaperSize&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Drawing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Printing&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PaperSize&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;A4&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;827&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1169&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;ps&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;DefaultPageSettings&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PaperSize&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;pgs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PaperSize&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

 &lt;span style=&#34;color:#000&#34;&gt;viewer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PrintDocumentWithSettings&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pgs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ps&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;pdf-to-postscript-conversion&#34;&gt;&lt;strong&gt;PDF to PostScript conversion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.facades/pdfviewer&#34;&gt;PdfViewer&lt;/a&gt; class provides the capability to print PDF documents and with the help of this class, we can also convert PDF files to PostScript format. To convert a PDF file into PostScript, first install any PS printer and just print to file with the help of PdfViewer. You may follow the instructions specified by &lt;a href=&#34;http://www.hawaii.edu/askus/637&#34;&gt;the University of Hawaii&lt;/a&gt; on how to install PS printer. The following code snippet shows you how to print and convert a PDF to PostScript format.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PdfToPostScript-PdfToPostScript.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;checking-print-job-status&#34;&gt;&lt;strong&gt;Checking Print Job Status&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A PDF file can be printed to a physical printer as well as to the Microsoft XPS Document Writer, without showing a print dialog, using the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.facades/pdfviewer&#34;&gt;PdfViewer&lt;/a&gt; class. When printing large PDF files, the process might take a long time so the user might not be certain whether the printing process completed or encountered an issue. To determine the status of a printing job, use the PrintStatus property. The following code snippet shows you how to print the PDF file to an XPS file and get the printing status.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-CheckPrintJobStatus-CheckPrintJobStatus.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;getset-print-job-owner-name&#34;&gt;&lt;strong&gt;Get/Set Print Job Owner name&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Recently we received a requirement to get/set the print job Owner name (the actual user who pressed print button on web page). This information is required when printing the PDF file. In order to accomplish this requirement, you can use the property named PrinterJobName:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-CheckPrintJobStatus-GetSetPrintOwnerName.cs&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-CheckPrintJobStatus-GetCurrentUserCredentials.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Using Impersonation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another approach of getting Print Job owner name is to use impersonation (running printing routines in another user context) or user may change owner name directly by using &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd162978%28VS.85%29.aspx&#34;&gt;SetJob routine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note that there is no possibility to set owner value using Aspose.PDF printing API by security considerations. The property PrinterJobName may be used to set document name column value in spooler print application. Code snippet shared above just shows how the user can join user name into document name column (for example using syntax UserName\documentName). But the setting of Owner columns can be implemented in following ways directly by user:&lt;/p&gt;
&lt;p&gt;\1) Impersonation. As owner column value contains the value of user who runs the printing code, there is a way to invoke Aspose.PDF printing API inside another user context. For example please take a look on solution described &lt;a href=&#34;http://www.codeproject.com/Articles/10090/A-small-C-Class-for-impersonating-a-User&#34;&gt;here&lt;/a&gt;. Using this class the user can reach a goal:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-CheckPrintJobStatus-UsingImpersonation.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;\2) Using Spooler API and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd162978%28VS.85%29.aspx&#34;&gt;SetJob routine&lt;/a&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The following links can be useful to get user credentials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/330a99hc%28v=vs.100%29.aspx&#34;&gt;ASP.NET Web Application Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee748475.aspx&#34;&gt;What is Windows Identity Foundation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.simple-talk.com/dotnet/asp.net/authentication-and-authorization-with-windows-accounts-in-asp.net/&#34;&gt;Authentication and Authorization with Windows Accounts in ASP.NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&#34;printing-pages-in-simplex-and-duplex-mode&#34;&gt;&lt;strong&gt;Printing pages in Simplex and Duplex mode&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In a particular printing job, the pages of PDF document can either be printed in Duplex or in Simplex mode but you cannot print some pages as simplex and some pages as duplex within a single print job. However in order to accomplish the requirement, different page ranges and *PrintingJobSettings * object can be used. The following code snippet shows how to print some pages of PDF file in Simplex and some pages in Duplex mode.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintPages-PrintingJobSettings.cs&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintPages-PrintPages.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;printing-different-page-range-to-different-paper-sourcetrays&#34;&gt;&lt;strong&gt;Printing Different Page Range to Different Paper Sourcetrays&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We were asked to support printing different pages to different page trays within a printing job. The user must be able to send a document to a printer and be sure that there are no other print jobs in between pages. The document must be printed as one. To print a different page range to different paper source trays, use the PdfViewer.PdfQueryPageSettings event handler. The following code snippet shows how to print even and odd page numbers to different sources:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintPageRange-PrintPageRange.cs&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/4a12f0ebd453e7f0d552ed6658ed3253.js?file=Examples-CSharp-AsposePdfFacades-Printing-PrintPageRange-PdfvOnPdfQueryPageSettings.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
  </channel>
</rss>
