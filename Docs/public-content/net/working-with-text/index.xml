<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation – Working with Text</title>
    <link>https://docs.aspose.com/pdf/net/working-with-text/</link>
    <description>Recent content in Working with Text on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.aspose.com/pdf/net/working-with-text/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: Add Text to a PDF file</title>
      <link>https://docs.aspose.com/pdf/net/add-text-to-a-pdf-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/add-text-to-a-pdf-file/</guid>
      <description>
        
        
        &lt;h2 id=&#34;add-text-in-an-existing-pdf-file&#34;&gt;&lt;strong&gt;Add Text in an Existing PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To add text to an existing PDF file:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the input PDF using the Document object.&lt;/li&gt;
&lt;li&gt;Get the particular page to which you want to add the text.&lt;/li&gt;
&lt;li&gt;Create a TextFragment object with the input text along with other text properties. The &lt;strong&gt;TextBuilder&lt;/strong&gt; object created from that particular page – to which you want to add the text – allows you to add the TextFragment object to the page using the AppendText method.&lt;/li&gt;
&lt;li&gt;Call the Document object&amp;rsquo;s Save method and save the output PDF file.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;adding-text&#34;&gt;&lt;strong&gt;Adding Text&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following code snippet shows you how to add text in an existing PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-AddText.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;loading-font-from-stream&#34;&gt;&lt;strong&gt;Loading Font from Stream&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following code snippet shows how to load Font from Stream object when adding text to PDF document.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-LoadingFontFromStream.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;add-text-using-textparagraph&#34;&gt;&lt;strong&gt;Add Text using TextParagraph&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following code snippet shows you how to add text in PDF document using &lt;strong&gt;TextParagraph&lt;/strong&gt; class.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-AddTextUsingTextParagraph.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;add-hyperlink-to-textsegment&#34;&gt;&lt;strong&gt;Add Hyperlink to TextSegment&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A PDF page may comprise of one or more TextFragment objects, where each TextFragment object can have one or more TextSegment instance. In order to set hyperlink for TextSegment, &lt;strong&gt;Hyperlink&lt;/strong&gt; property of TextSegment class can be used while providing the object of &lt;strong&gt;Aspose.Pdf.WebHyperlink&lt;/strong&gt; instance. Please try using the following code snippet to accomplish this requirement.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-AddHyperlinkToTextSegment.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;use-otf-font&#34;&gt;&lt;strong&gt;Use OTF Font&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Aspose.PDF for .NET offers the feature to use Custom/TrueType fonts while creating/manipulating PDF file contents so that file contents are displayed using contents other than default system fonts. Starting release of &lt;a href=&#34;http://www.aspose.com/community/files/51/.net-components/aspose.pdf-for-.net/entry620071.aspx&#34;&gt;Aspose.PDF for .NET 10.3.0&lt;/a&gt;, we have provided the support for Open Type Fonts.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-OTFFont.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;add-html-string-using-dom&#34;&gt;&lt;strong&gt;Add HTML String using DOM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The Aspose.Pdf.Generator.Text class contains a property called IsHtmlTagSupported which makes it possible to add HTML tags/contents into PDF files. The added content is rendered in native HTML tags instead of appearing as a simple text string. To support a similar feature in the new Document Object Model (DOM) of the Aspose.Pdf namespace, the HtmlFragment class has been introduced.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf/htmlfragment&#34;&gt;HtmlFragment &lt;/a&gt;instance can be used to specify the HTML contents which should be placed inside the PDF file. Similar to TextFragment, HtmlFragment is a paragraph level object and can be added to the Page object&amp;rsquo;s paragraphs collection. The following code snippets show the steps to place HTML contents inside PDF file using the DOM approach.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddHTMLUsingDOM-AddHTMLUsingDOM.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Following code snippet demonstrate steps how to add HTML ordered lists into the document:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-AddHTMLOrderedListIntoDocuments-AddHTMLOrderedListIntoDocuments.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can also set HTML string formatting using TextState object as following:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-SetHTMLStringFormatting-SetHTMLStringFormatting.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In case if you set some text attributes values via HTML markup and then provide the same values in TextState properties they will overwrite HTML parameters by properties form TextState instance. The following code snippets show described behavior.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-AddHTMLUsingDOMAndOverwrite-AddHTMLUsingDOMAndOverwrite.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;footnotes-and-endnotes-dom&#34;&gt;&lt;strong&gt;FootNotes and EndNotes (DOM)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;FootNotes indicate notes in the text of your paper by using consecutive superscript numbers. The actual note is indented and can occur as a footnote at the bottom of the page.&lt;/p&gt;
&lt;h3 id=&#34;adding-footnote&#34;&gt;&lt;strong&gt;Adding FootNote&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In a footnote referencing system, indicate a reference by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;putting a small number above the line of type directly following the source material. This number is called a note identifier. It sits slightly above the line of text.&lt;/li&gt;
&lt;li&gt;putting the same number, followed by a citation of your source, at the bottom of the page. Footnoting should be numerical and chronological: the first reference is 1, the second is 2, and so on. The advantage of footnoting is that the reader can simply cast their eyes down the page to discover the source of a reference that interests them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please follow the steps specified below to create a FootNote:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Document instance&lt;/li&gt;
&lt;li&gt;Create a Page object&lt;/li&gt;
&lt;li&gt;Create a TextFragment object&lt;/li&gt;
&lt;li&gt;Create a Note instance and pass it&amp;rsquo;s value to TextFragment.FootNote property&lt;/li&gt;
&lt;li&gt;Add TextFragment to paragraphs collection of a page instance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;custom-line-style-for-footnote&#34;&gt;&lt;strong&gt;Custom line style for FootNote&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following example demonstrates how to add Footnotes to the bottom of the Pdf page and define a custom line style.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-FootAndEndNotes-CustomLineStyleForFootNote.cs&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;We can set Footnote Label (note identifier) formatting using TextState object as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#000&#34;&gt;TextFragment&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;text&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TextFragment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test text 1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;p&gt;&lt;span style=&#34;color:#000&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FootNote&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;quot;foot note for test text 1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#000&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FootNote&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;quot;21&amp;quot;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#000&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FootNote&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TextState&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#000&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FootNote&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ForegroundColor&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pdf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Color&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Blue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#000&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FootNote&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TextState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FontStyle&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FontStyles&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Italic&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;customize-footnote-label&#34;&gt;&lt;strong&gt;Customize Footnote label&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;By default, the FootNote number is incremental starting from 1. However, we may have a requirement to set a custom FootNote label. In order to accomplish this requirement, please try using the following code snippet&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-FootAndEndNotes-CustomizeFootNoteLabel.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;adding-image-and-table-to-footnote&#34;&gt;&lt;strong&gt;Adding Image and Table to Footnote&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In earlier release versions, the Footnote support was provided but it was only applicable to TextFragment object. However starting release Aspose.PDF for .NET 10.7.0, you can also add Footnote to other objects inside PDF document such as Table, Cells etc. The following code snippet shows the steps to add Footnote to TextFragment object and then add Image and Table object to paragraphs collection of Footnote section.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-FootAndEndNotes-AddImageAndTable.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;how-to-create-endnotes&#34;&gt;&lt;strong&gt;How to Create EndNotes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;An EndNote is a source citation that refers the readers to a specific place at the end of the paper where they can find out the source of the information or words quoted or mentioned in the paper. When using endnotes, your quoted or paraphrased sentence or summarized material is followed by a superscript number.&lt;/p&gt;
&lt;p&gt;The following example demonstrates how to add an Endnote in the Pdf page.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-FootAndEndNotes-CreateEndNotes.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;text-and-image-as-inline-paragraph&#34;&gt;&lt;strong&gt;Text and Image as InLine Paragraph&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The default layout of the PDF file is flow layout (Top-Left to Bottom-Right). Therefore every new element being added to PDF file is added in the bottom right flow. However, we may have a requirement to display various page elements i.e. Image and Text at the same level (one after another). One approach can be to create a Table instance and add both elements to individual cell objects. However, another approach can be InLine paragraph. By setting &lt;strong&gt;IsInLineParagraph&lt;/strong&gt; property of Image and Text as true, these paragraphs will appear as inline to other page elements.&lt;/p&gt;
&lt;p&gt;The following code snippet shows you how to add text and Image as InLine paragraphs in PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-TextAndImageAsParagraph-TextAndImageAsParagraph.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;specify-character-spacing-when-adding-text&#34;&gt;&lt;strong&gt;Specify character Spacing when adding Text&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A text can be added inside paragraphs collection of PDF files using &lt;strong&gt;TextFragment&lt;/strong&gt; instance or by using &lt;strong&gt;TextParagraph&lt;/strong&gt; object and even you can stamp the text inside PDF by using &lt;strong&gt;TextStamp&lt;/strong&gt; class. While adding the text, we may have a requirement to specify character spacing for the text objects. In order to accomplish this requirement, a new property named &lt;strong&gt;CharacterSpacing&lt;/strong&gt; property has been introduced. Please take a look at the following approaches to fulfill this requirement.&lt;/p&gt;
&lt;p&gt;The following approaches show the steps to specify character spacing when adding text inside a PDF document.&lt;/p&gt;
&lt;h3 id=&#34;using-textbuilder-and-textfragment&#34;&gt;&lt;strong&gt;Using TextBuilder and TextFragment&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SpecifyCharacterSpacing-UsingTextBuilderAndFragment.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;using-textparagraph-and-textparagraph&#34;&gt;&lt;strong&gt;Using TextParagraph and TextParagraph&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SpecifyCharacterSpacing-UsingTextBuilderAndParagraph.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;using-textstamp&#34;&gt;&lt;strong&gt;Using TextStamp&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SpecifyCharacterSpacing-UsingTextStamp.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;create-multi-column-pdf-document&#34;&gt;&lt;strong&gt;Create Multi-Column PDF document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In magazines and newspapers, we mostly see that news are displayed in multiple columns on the single pages instead of the books where text paragraphs are mostly printed on the whole pages from left to right position. Many document processing applications like Microsoft Word and Adobe Acrobat Writer allow users to create multiple columns on a single page and then add data to them.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/&#34;&gt;Aspose.PDF for .NET&lt;/a&gt; also offers the feature to create multiple columns inside the pages of PDF documents. In order to create multi-column PDF file, we can make use of Aspose.Pdf.FloatingBox class as it provides ColumnInfo.ColumnCount property to specify the number of columns inside FloatingBox and we can also specify the spacing between columns and columns widths using ColumnInfo.ColumnSpacing and ColumnInfo.ColumnWidths properties accordingly. Please note that FloatingBox is an element inside Document Object Model and it can have obsolete positioning as compared to relative positioning (i.e. Text, Graph, Image, etc).&lt;/p&gt;
&lt;p&gt;Column spacing means the space between the columns and the default spacing between the columns is 1.25cm. If the column width is not specified, then &lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/&#34;&gt;Aspose.PDF for .NET&lt;/a&gt; calculates width for each column automatically according to the page size and column spacing.&lt;/p&gt;
&lt;p&gt;An example is given below to demonstrate the creation of two columns with Graphs objects (Line) and they are added to paragraphs collection of FloatingBox, which is then added paragraphs collection of Page instance.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-CreateMultiColumnPdf-CreateMultiColumnPdf.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;working-with-custom-tab-stops&#34;&gt;&lt;strong&gt;Working with custom Tab Stops&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A Tab Stop is a stop point for tabbing. In word processing, each line contains a number of tab stops placed at regular intervals (for example, every half inch). They can be changed, however, as most word processors allow you to set tab stops wherever you want. When you press the Tab key, the cursor or insertion point jumps to the next tab stop, which itself is invisible. Although tab stops do not exist in the text file, the word processor keeps track of them so that it can react correctly to the Tab key.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/&#34;&gt;Aspose.PDF for .NET&lt;/a&gt; allows developers to use custom tab stops in PDF documents. The *Aspose.Pdf.Text.TabStop class is used to set custom TAB stops in the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.text/textfragment&#34;&gt;TextFragment&lt;/a&gt; class.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aspose.com/pdf/pdf/net/&#34;&gt;Aspose.PDF for .NET&lt;/a&gt; also offers some pre-defined tab leader types as an enumeration named, &lt;a href=&#34;http://www.aspose.com/api/net/pdf/aspose.pdf.generator/tableadertype&#34;&gt;TabLeaderType&lt;/a&gt; whose pre-defined values and their descriptions are given below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Tab Leader Type&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No tab leader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Solid&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Solid tab leader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Dash&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dash tab leader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Dot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dot tab leader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Here is an example of how to set custom TAB stops.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-CustomTabStops-CustomTabStops.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;how-to-add-transparent-text-in-pdf&#34;&gt;&lt;strong&gt;How to Add Transparent Text in PDF&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A PDF file contains Image, Text, Graph, attachment, Annotations objects and while creating TextFragment, you can set foreground, background-color information as well as text formatting. Aspose.PDF for .NET supports the feature to add text with Alpha color channel. The following code snippet shows how to add text with transparent color.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddTransparentText-AddTransparentText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;specify-linespacing-for-fonts&#34;&gt;&lt;strong&gt;Specify LineSpacing for Fonts&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Every font has an abstract square, whose height is the intended distance between lines of type in the same type size. This square is called the em square and it is the design grid on which the glyph outlines are defined. Many letters of input font have points that are placed out of font&amp;rsquo;s em square bounds, so in order to display the font correctly, usage of special setting is needed. The object TextFragment has a set of text formatting options which are accessible via properties TextState.FormattingOptions. Last property of this path is property of type &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.text/textformattingoptions/&#34;&gt;Aspose.Pdf.Text.TextFormattingOptions&lt;/a&gt;. This class has a an enumeration &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.text.textformattingoptions/linespacingmode/&#34;&gt;LineSpacingMode &lt;/a&gt;which is designed for specific fonts e.g input font &amp;ldquo;HPSimplified.ttf&amp;rdquo;. Also class Aspose.Pdf.Text.TextFormattingOptions has a property &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.text/textformattingoptions/properties/linespacing&#34;&gt;LineSpacing &lt;/a&gt;of type LineSpacingMode. You just need to set LineSpacing into LineSpacingMode.FullSize. The code snippet to get a font displayed correctly, would be like as follows:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SpecifyLineSpacing-1.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;get-text-width-dynamically&#34;&gt;&lt;strong&gt;Get Text Width Dynamically&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, it is required to get the text width dynamically. Aspose.PDF for .NET includes two methods for string width measurement. You can invoke the &lt;strong&gt;MeasureString()&lt;/strong&gt; method of Aspose.Pdf.Text.Font or Aspose.Pdf.Text.TextState classes (or both). The code snippet below shows how to use this functionality.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-GetWidthOfTextDynamically-GetWidthOfTextDynamically.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Text Formatting inside PDF</title>
      <link>https://docs.aspose.com/pdf/net/text-formatting-inside-pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/text-formatting-inside-pdf/</guid>
      <description>
        
        
        &lt;h2 id=&#34;add-line-indent&#34;&gt;&lt;strong&gt;Add Line Indent&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET offers SubsequentLinesIndent property into TextFormattingOptions class. Which can be used to specify line indent in PDF generation scenarios with TextFragment and Paragraphs collection. Please use the following code snippet to use the property:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddSubsequentLinesIndent-1.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;add-text-border&#34;&gt;&lt;strong&gt;Add Text Border&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The following code snippet shows, how to add a border to a text using TextBuilder and setting DrawTextRectangleBorder property of TextState:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddTextBorder-1.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;add-underline-text&#34;&gt;&lt;strong&gt;Add Underline Text&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The following code snippet shows you how to add Underline text while creating a new PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-AddUnderlineText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;adding-a-border-around-added-text&#34;&gt;&lt;strong&gt;Adding a Border Around Added Text&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You have control over the look and feel of the text you add. The example below shows how to add a border around a piece of text that you have added by drawing a rectangle around it. Find out more about the &lt;a href=&#34;http://www.aspose.com/docs/display/pdfnet/Aspose.PDF.Facades.PdfContentEditor+Class&#34;&gt;PdfContentEditor&lt;/a&gt; class.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-AddingBorderAroundAddedText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;adding-newline-feed&#34;&gt;&lt;strong&gt;Adding NewLine feed&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;TextFragment doesn&amp;rsquo;t support line feed inside the text. However in order to add text with line feed, please use TextFragment with TextParagraph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &amp;ldquo;\r\n&amp;rdquo; or Environment.NewLine in TextFragment instead of single &amp;ldquo;\n&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;create TextParagraph object. It will add text with line splitting;&lt;/li&gt;
&lt;li&gt;add the TextFragment with TextParagraph.AppendLine;&lt;/li&gt;
&lt;li&gt;add the TextParagraph with TextBuilder.AppendParagraph.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please use below code snippet.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-AddNewLineFeed.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;adding-strikeout-text&#34;&gt;&lt;strong&gt;Adding StrikeOut Text&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The TextState class provides the capabilities to set formatting for TextFragments being placed inside PDF document. You can use this class to set text formatting as Bold, Italic, Underline and starting this release, the API has provided the capabilities to mark text formatting as Strikeout. Please try using the following code snippet to add TextFragment with Strikeout formatting.&lt;/p&gt;
&lt;p&gt;Please use complete code snippet:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddText-AddStrikeOutText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;apply-gradient-shading-to-the-text&#34;&gt;&lt;strong&gt;Apply Gradient Shading to the Text&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Text formatting has been further enhanced in the API for text editing scenarios and now you can add text with pattern colorspace inside PDF document. Aspose.Pdf.Color Class has further been enhanced by introducing new property of PatternColorSpace, which can be used to specify shading colors for the text. This new property adds different Gradient Shading to the text e.g. Axial Shading, Radial (Type 3) Shading as shown in the following code snippet:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddTextWithShadingColors-1.cs&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

In order to apply a Radial Gradient, you can set &amp;lsquo;PatternColorSpace&amp;rsquo; property equal to &amp;lsquo;Aspose.Pdf.Drawing.GradientRadialShading(startingColor, endingColor)&amp;rsquo; in the above code snippet.
&lt;/div&gt;

&lt;h2 id=&#34;text-alignment-for-floating-box-contents&#34;&gt;&lt;strong&gt;Text Alignment for Floating Box Contents&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF supports setting text alignment for contents inside a Floating Box element. The alignment properties of Aspose.Pdf.FloatingBox instance can be used to achieve this as shown in the following code sample.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-TextAlignmentForFloatingBoxContents-TextAlignmentForFloatingBoxContents.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Add Tooltip to Text</title>
      <link>https://docs.aspose.com/pdf/net/add-tooltip-to-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/add-tooltip-to-text/</guid>
      <description>
        
        
        &lt;h2 id=&#34;add-tooltip-to-searched-text-by-adding-invisible-button&#34;&gt;&lt;strong&gt;Add Tooltip to Searched Text by adding Invisible Button&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It is often required to add some details for a phrase or specific word as a tooltip in the PDF document so that it can popup when the user hovers the mouse cursor over the text. Aspose.PDF for .NET provides this feature to create tooltips by adding an invisible button over the searched text. The following code snippet will show you the way to achieve this functionality:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-AddTooltipToText-1.cs&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Concerning to the length of the tooltip, the tooltip text is contained in the PDF document as PDF string type, outside of the content stream. There is no effective restriction on such strings in PDF files (See PDF Reference Appendix C.). However, a conforming reader (e.g. Adobe Acrobat) running on a particular processor and in a particular operating environment does have such a limit. Please refer to your PDF reader application documentation.
&lt;/div&gt;

&lt;h2 id=&#34;create-a-hidden-text-block-and-show-it-on-mouse-over&#34;&gt;&lt;strong&gt;Create a Hidden Text Block and Show it on Mouse Over&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In Aspose.PDF, a feature to hide actions is implemented by which it is possible to show/hide text box field (or any other type of annotation) on mouse enter/exit over some invisible button. For this purpose, Aspose.Pdf.Annotations.HideAction Class is used to assign the action of hide/show to the text block. Please use the following code snippet to Show/Hide a Text Block on Mouse Enter/Exit.&lt;/p&gt;
&lt;p&gt;Please also take into account that PDF actions in the documents work fine in the conforming readers (e.g. Adobe Reader) but no warranties for other PDF readers (e.g. web browser plugins). We have provided a brief investigation and found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All implementations of the hide action in PDF documents work fine in Internet Explorer v.11.0.&lt;/li&gt;
&lt;li&gt;All implementations of the hide action also work in Opera v.12.14, but we spot some response delay at the first opening of the document.&lt;/li&gt;
&lt;li&gt;Only implementation using HideAction constructor accepting field name works if Google Chrome v.61.0 browses the document; Please use corresponding constructors if browsing in the Google Chrome is significant:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt; &lt;span style=&#34;color:#000&#34;&gt;buttonField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Actions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OnEnter&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;HideAction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;floatingField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FullName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;buttonField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Actions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OnExit&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;HideAction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;floatingField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FullName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any implementation of the hide action in PDF documents doesn&amp;rsquo;t work if Mozilla Firefox v.47.0 browses the document.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-HiddenTextBlock-1.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Extract Text from PDF</title>
      <link>https://docs.aspose.com/pdf/net/extract-text-from-pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/extract-text-from-pdf/</guid>
      <description>
        
        
        &lt;h2 id=&#34;extract-text-from-all-the-pages-of-a-pdf-document&#34;&gt;&lt;strong&gt;Extract Text From All the Pages of a PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Extracting text from a PDF document is a common requirement. In this example, you’ll see how Aspose.PDF for .NET allows extracting text from all the pages of a PDF document. You need to create an object of the &lt;strong&gt;TextAbsorber&lt;/strong&gt; class. After that, open the PDF using &lt;strong&gt;Document&lt;/strong&gt; class and call the &lt;strong&gt;Accept&lt;/strong&gt; method of the &lt;strong&gt;Pages&lt;/strong&gt; collection. The &lt;strong&gt;TextAbsorber&lt;/strong&gt; class absorbs the text from the document and returns in &lt;strong&gt;Text&lt;/strong&gt; property. The following code snippet shows you how to extract text from all pages of PDF document.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractTextAll-ExtractTextAll.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Call the &lt;strong&gt;Accept&lt;/strong&gt; method on a particular page of the Document object. The Index is the particular page number from where text needs to be extracted.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractTextPage-ExtractTextPage.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-text-from-pages-using-text-device&#34;&gt;&lt;strong&gt;Extract Text from Pages using Text Device&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can use the &lt;strong&gt;TextDevice&lt;/strong&gt; class to extract text from a PDF file. TextDevice uses TextAbsorber in its implementation, thus, in fact, they do the same thing but TextDevice just implemented to unify the &amp;ldquo;Device&amp;rdquo; approach to extract anything from the page ImageDevice, PageDevice, etc. TextAbsorber may extract text from Page, entire PDF or XForm, this TextAbsorber is more universal&lt;/p&gt;
&lt;h3 id=&#34;extract-text-from-all-pages&#34;&gt;&lt;strong&gt;Extract text from all pages&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The following steps and code snippet shows you how to extract text from a PDF using the text device.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an object of Document class with input PDF file specified&lt;/li&gt;
&lt;li&gt;Create an object of TextDevice class&lt;/li&gt;
&lt;li&gt;Use object of TextExtractOptions class to specify extraction options&lt;/li&gt;
&lt;li&gt;Use the Process method of TextDevice class to convert contents to the text&lt;/li&gt;
&lt;li&gt;Save the text to the output file&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractTextUsingTextDevice-ExtractTextUsingTextDevice.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-text-from-a-particular-page-region&#34;&gt;&lt;strong&gt;Extract Text from a particular page region&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TextAbsorber&lt;/strong&gt; class provides the capability to extract text from a particular or all pages of a PDF document. This class returns the extracted text in the &lt;strong&gt;Text&lt;/strong&gt; property. However, if we have the requirement to extract text from a particular page region, we can use the &lt;strong&gt;Rectangle&lt;/strong&gt; property of &lt;strong&gt;TextSearchOptions.&lt;/strong&gt; The Rectangle property takes a Rectangle object as a value and using this property, we can specify the region of the page from which we need to extract the text.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Accept&lt;/strong&gt; method of a page is called to extract the text. Create objects of &lt;strong&gt;Document&lt;/strong&gt; and &lt;strong&gt;TextAbsorber&lt;/strong&gt; classes. Call &lt;strong&gt;Accept&lt;/strong&gt; method on the individual page, as &lt;strong&gt;Page&lt;/strong&gt;Index, of the &lt;strong&gt;Document&lt;/strong&gt; object. The &lt;strong&gt;Index&lt;/strong&gt; is the particular page number from where text needs to be extracted. You can get text from the &lt;strong&gt;Text&lt;/strong&gt; property of the &lt;strong&gt;TextAbsorber&lt;/strong&gt; class. The following code snippet shows you how to extract text from an individual page.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractTextFromPageRegion-ExtractTextFromPageRegion.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;extract-text-based-on-columns&#34;&gt;&lt;strong&gt;Extract text based on columns&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A PDF file may comprise of Text, Image, Annotations, Attachments, Graphs, etc elements and Aspose.PDF for .NET offers the feature to Add as well as manipulate all of these elements. This API is remarkable when comes to Text addition and extraction from PDF document and we may come across a scenario where a PDF document is comprised of more than one columns (multi-column) PDF document and we need to extract the page contents while honoring the same layout, then Aspose.PDF for .NET is the right choice to accomplish this requirement. One approach is to reduce the font size of contents inside the PDF document and then perform text extraction. The following code snippet shows the steps to reduce text size and then try extracting text from PDF document.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractColumnsText-ExtractColumnsText.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;second-approach---using-scalefactor&#34;&gt;&lt;strong&gt;Second approach - Using ScaleFactor&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In this new release, we also have introduced several improvements in TextAbsorber and in the internal text formatting mechanism. So now during the text extraction using ‘Pure’ mode, you may specify the ScaleFactor option and it can be another approach to extract text from a multi-column PDF document besides the above-stated approach. This scale factor may be set to adjust the grid which is used for the internal text formatting mechanism during text extraction. Specifying the ScaleFactor values between 1 and 0.1 (including 0.1) has the same effect as font reduction.&lt;/p&gt;
&lt;p&gt;Specifying the ScaleFactor values between 0.1 and -0.1 is treated as zero value, but it makes the algorithm to calculate scale factor needed during extracting text automatically. The calculation is based on average glyph width of the most popular font on the page, but we cannot guarantee that in extracted text no string of column reaches the start of the next column. Please note that if ScaleFactor value is not specified, the default value of 1.0 will be used. It means no scaling will be carried out. If the specified ScaleFactor value is more than 10 or less than -0.1, the default value of 1.0 will be used.&lt;/p&gt;
&lt;p&gt;We propose the usage of auto-scaling (ScaleFactor = 0) when processing a large number of PDF files for text content extraction. Or manually set redundant reducing of grid width ( about ScaleFactor = 0.5). However, you must not determine whether scaling is necessary for concrete documents or not. If You set redundant reducing of grid width for the document (that doesn&amp;rsquo;t need in it), the extracted text content will remain fully adequate. Please take a look at the following code snippet.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractColumnsText-UsingScaleFactor.cs&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Please note that there is no direct correspondence between the new ScaleFactor and the old coefficient of manually font reducing. However, by default algorithm takes into account the value of font size that has already reduced due to some internal reasons. For example, reducing font size from 10 to 7 has the same effect as setting a scale factor to 5/8 (= 0.625).
&lt;/div&gt;

&lt;h2 id=&#34;extract-highlighted-text-from-pdf-document&#34;&gt;&lt;strong&gt;Extract Highlighted Text from PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In various scenarios of text extraction from a PDF document, you can come up with a requirement to extract only highlighted text from PDF document. In order to implement the functionality, we have added TextMarkupAnnotation.GetMarkedText() and TextMarkupAnnotation.GetMarkedTextFragments() methods in API. You can extract highlighted text from PDF document by filtering TextMarkupAnnotation and using the mentioned methods. The following code snippet shows how you can extract highlighted text from PDF document. &lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Annotations-ExtractHighlightedText-1.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;access-text-fragment-and-segment-elements-from-xml&#34;&gt;&lt;strong&gt;Access Text Fragment and Segment Elements from XML&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes we need access to TextFragement or TextSegment items when processing PDF documents generated from XML. Aspose.PDF for .NET provides access to such items by name. The code snippet below shows how to use this functionality.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-AccessTextFragementAndTextSegmentElementsFromXMLFile-AccessTextFragementAndTextSegmentElementsFromXMLFile.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Extract Paragraph from PDF</title>
      <link>https://docs.aspose.com/pdf/net/extract-paragraph-from-pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/extract-paragraph-from-pdf/</guid>
      <description>
        
        
        &lt;h2 id=&#34;extract-text-from-pdf-document-in-paragraphs-form&#34;&gt;&lt;strong&gt;Extract Text from PDF document in Paragraphs form&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We can get text from a PDF document by searching a particular text (using &amp;ldquo;plain text&amp;rdquo; or &amp;ldquo;regular expressions&amp;rdquo;) from a single page or whole document, or we can get the complete text of a single page, range of pages or complete document. However, in some cases, you require to extract paragraphs from a PDF document or text in the form of Paragraphs. We have implemented functionality for searching sections and paragraphs in the text of PDF document pages. We have introduced ParagraphAbsorber Class (like TextFragmentAbsorber and TextAbsorber), which can be used to extract paragraphs from PDF documents. There are two following ways in which you can use ParagraphAbsorber:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1- By drawing the border of sections and paragraphs of text on PDF page:&lt;/strong&gt;&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractParagraphsByDrawingBorder-1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;2- By iterating through paragraphs collection and get the text of them:&lt;/strong&gt;&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ExtractParagraphs-1.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Replace Text in a PDF Document</title>
      <link>https://docs.aspose.com/pdf/net/replace-text-in-a-pdf-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/replace-text-in-a-pdf-document/</guid>
      <description>
        
        
        &lt;h2 id=&#34;replace-text-in-all-pages-of-pdf-document&#34;&gt;&lt;strong&gt;Replace Text in all pages of PDF document&lt;/strong&gt;&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;You can try to find in replace the text in the document using Aspose.PDF and get the results online at this link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://products.aspose.app/pdf/redaction&#34;&gt;products.aspose.app/pdf/redaction&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;In order to replace text in all the pages of a PDF document, you first need to use &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; to find the particular phrase you want to replace. After that, you need to go through all the &lt;strong&gt;TextFragments&lt;/strong&gt; to replace the text and change any other attributes. Once you have done that, you only need to save the output PDF using the &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;Document&lt;/strong&gt; object. 
The following code snippet shows you how to replace text in all pages of PDF document.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ReplaceTextAll-ReplaceTextAll.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;replace-text-in-particular-page-region&#34;&gt;&lt;strong&gt;Replace Text in particular page region&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to replace text in a particular page region, first, we need to instantiate &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; object, specify page region using &lt;strong&gt;TextSearchOptions.Rectangle&lt;/strong&gt; property and then iterate through all the &lt;strong&gt;TextFragments&lt;/strong&gt; to replace the text. Once these operations are completed, we only need to save the output PDF using the &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;Document&lt;/strong&gt; object. 
The following code snippet shows you how to replace text in all pages of PDF document.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// load PDF file
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PDF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Document&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;pdf&lt;/span&gt;  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PDF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Document&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;c:/pdftest/programaticallyproducedpdf.pdf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// instantiate TextFragment Absorber object
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PDF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextFragmentAbsorber&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TextFragmentAbsorberAddress&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PDF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextFragmentAbsorber&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// search text within page bound
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;TextFragmentAbsorberAddress&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextSearchOptions&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;LimitToPageBounds&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// specify the page region for TextSearch Options
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;TextFragmentAbsorberAddress&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextSearchOptions&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Rectangle&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PDF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Rectangle&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// search text from first page of PDF file
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;pdf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Pages&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Accept&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TextFragmentAbsorberAddress&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// iterate through individual TextFragment
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;foreach&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Aspose&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PDF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextFragment&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tf&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TextFragmentAbsorberAddress&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TextFragments&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// update text to blank characters
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;tf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// save updated PDF file after text replace
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;pdf&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Save&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;c:/pdftest/TextUpdated.pdf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;replace-text-based-on-a-regular-expression&#34;&gt;&lt;strong&gt;Replace Text Based on a Regular Expression&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you want to replace some phrases based on regular expression, you first need to find all the phrases matching that particular regular expression using &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt;. You will have to pass the regular expression as a parameter to the &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; constructor. You also need to create &lt;strong&gt;TextSearchOptions&lt;/strong&gt; object which specifies whether the regular expression is being used or not. Once you get the matching phrases in &lt;strong&gt;TextFragments&lt;/strong&gt;, you need to loop through all of them and update as required. Finally, you need to save the updated PDF using the &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;Document&lt;/strong&gt; object. The following code snippet shows you how to replace text based on a regular expression.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ReplaceTextonRegularExpression-ReplaceTextonRegularExpression.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;replace-only-first-occurrence-of-the-phrase&#34;&gt;&lt;strong&gt;Replace Only First Occurrence of the Phrase&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Replacing the first or particular occurrence of a phrase is quite much similar replacing all the occurrences of the text. The only difference is that in order to replace first or some other particular occurrence, you need to specify the index of that phrase. You first need to use &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; to find the particular phrase you want to replace. After that, you need to get particular &lt;strong&gt;TextFragment&lt;/strong&gt; using the index, replace the text and change any other attributes. If you want to replace first occurrence , you can specify index as 1. Once you have done that, you only need to save the output PDF using the &lt;strong&gt;Save&lt;/strong&gt; method of the &lt;strong&gt;Document&lt;/strong&gt; object. The following code snippet shows you how to replace only the first occurrence of the phrase.&lt;/p&gt;
&lt;h2 id=&#34;replace-fonts-in-existing-pdf-file&#34;&gt;&lt;strong&gt;Replace fonts in existing PDF file&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET supports the capability to replace text in PDF document. However, sometimes you have a requirement to only replace the font being used inside PDF document. So instead of replacing the text, only font being used is replaced. One of the overloads of &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; constructor accepts &lt;strong&gt;TextEditOptions&lt;/strong&gt; object as an argument and we can use &lt;strong&gt;RemoveUnusedFonts&lt;/strong&gt; value from &lt;strong&gt;TextEditOptions.FontReplace&lt;/strong&gt; enumeration to accomplish our requirements. The following code snippet shows how to replace the font inside PDF document.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ReplaceFonts-ReplaceFonts.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;text-replacement-should-automatically-re-arrange-page-contents&#34;&gt;&lt;strong&gt;Text Replacement should automatically re-arrange Page Contents&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET supports the feature to search and replace text inside the PDF file. However recently some customers encountered issues during text replace when particular TextFragment is replaced with smaller contents and some extra spaces are displayed in resultant PDF or in case the TextFragment is replaced with some longer string, then words overlap existing page contents. So the requirement was to introduce a mechanism that once the text inside a PDF document is replaced, the contents should be re-arranged.&lt;/p&gt;
&lt;p&gt;In order to cater above-stated scenarios, Aspose.PDF for .NET has been enhanced so that no such issues appear when replacing text inside PDF file. The following code snippet shows how to replace text inside PDF file and the page contents should be re-arranged automatically.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RearrangeContentsUsingTextReplacement-RearrangeContentsUsingTextReplacement.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;rendering-replaceable-symbols-during-pdf-creation&#34;&gt;&lt;strong&gt;Rendering Replaceable Symbols during PDF creation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Replaceable symbols are special symbols in a text string that can be replaced with corresponding content at run time. Replaceable symbols currently support by new Document Object Model of Aspose.PDF namespace are &lt;strong&gt;$P&lt;/strong&gt;, &lt;strong&gt;$p&lt;/strong&gt;, &lt;strong&gt;\n&lt;/strong&gt;, &lt;strong&gt;\r&lt;/strong&gt;. The &lt;strong&gt;$p&lt;/strong&gt; and &lt;strong&gt;$P&lt;/strong&gt; are used to deal with the page numbering at run time. $p is replaced with the number of the page where the current Paragraph class is in. $P is replaced with the total number of pages in the document.
When adding TextFragment to the paragraphs collection of PDF documents, it does not support line feed inside the text. However in order to add text with a line feed, please use TextFragment with TextParagraph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &amp;ldquo;\r\n&amp;rdquo; or Environment.NewLine in TextFragment instead of single &amp;ldquo;\n&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;create a TextParagraph object. It will add text with line splitting;&lt;/li&gt;
&lt;li&gt;add the TextFragment with TextParagraph.AppendLine;&lt;/li&gt;
&lt;li&gt;add the TextParagraph with TextBuilder.AppendParagraph.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RenderingReplaceableSymbols-RenderingReplaceableSymbols.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;replaceable-symbols-in-headerfooter-area&#34;&gt;&lt;strong&gt;Replaceable symbols in Header/Footer area&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Replaceable symbols can also be placed inside the Header/Footer section of PDF file. Please take a look over the following code snippet for details on how to add replaceable symbol in the footer section.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ReplaceableSymbolsInHeaderFooter-ReplaceableSymbolsInHeaderFooter.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;remove-unused-fonts-from-pdf-file&#34;&gt;&lt;strong&gt;Remove Unused Fonts from PDF File&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET supports the feature to embed fonts while creating a PDF document, as well as the capability to embed fonts in existing PDF files. From Aspose.PDF for .NET 7.3.0, it also lets you remove duplicate or unused fonts from PDF documents.&lt;/p&gt;
&lt;p&gt;To replace fonts, use the following approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call the &lt;a href=&#34;https://apireference.aspose.com/net/pdf/aspose.pdf.text/textfragmentabsorber&#34;&gt;TextFragmentAbsorber&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;Call the TextFragmentAbsorber class&amp;rsquo; TextEditOptions.FontReplace.RemoveUnusedFonts parameter. (This removes fonts that have become unused during font replacement).&lt;/li&gt;
&lt;li&gt;Set font individually for each text fragment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following code snippet replaces font for all text fragments of all document pages and removes unused fonts.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RemoveUnusedFonts-RemoveUnusedFonts.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;remove-all-text-from-pdf-document&#34;&gt;&lt;strong&gt;Remove All Text from PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;remove-all-text-using-operators&#34;&gt;&lt;strong&gt;Remove All Text using Operators&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In some text operation, you need to remove all text from PDF document and for that, you need to set found text as empty string value usually. The point is that changing the text for multitude text fragments invokes a number of checking and text position adjustment operations. They are essential in the text editing scenarios. The difficulty is that you cannot determine how many text fragments will be removed in the scenario where they are processed in a loop.&lt;/p&gt;
&lt;p&gt;Therefore, we recommend using another approach for the scenario of removing &lt;strong&gt;all&lt;/strong&gt; text from PDF pages. Please consider the following code snippet that works very fast.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RemoveAllText-1.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;remove-all-text-using-textfragmentabsober&#34;&gt;&lt;strong&gt;Remove All Text using TextFragmentAbsober&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;From Aspose.PDF for .NET 18.7 version, TextFragmentAbsorber.RemoveAllText() method has been implemented. You can remove text from a particular page as well as from the whole PDF document using this method. In specific scenarios where text removal from PDF is the main requirement, this new function works quite efficiently and fast. Following code snippet shows how to remove text from a PDF document using this method: &lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RemoveAllTextFromPDF-1.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Rotate Text Inside PDF</title>
      <link>https://docs.aspose.com/pdf/net/rotate-text-inside-pdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/rotate-text-inside-pdf/</guid>
      <description>
        
        
        &lt;h2 id=&#34;rotate-text-inside-pdf-using-rotation-property&#34;&gt;&lt;strong&gt;Rotate Text Inside PDF using Rotation Property&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;By using the Rotation property of TextFragment Class, you can rotate text at various angles. The text rotation can be used in different scenarios of document generation. You can specify the rotation angle in degrees to rotate the text as per your requirement. Please check the following different scenarios, in which you can implement text rotation.&lt;/p&gt;
&lt;h3 id=&#34;implement-rotation-using-textfragment-and-textbuilder&#34;&gt;&lt;strong&gt;Implement Rotation using TextFragment and TextBuilder&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RotateTextUsingTextFragment-RotateTextUsingTextFragment.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;implement-rotation-using-textparagraph-and-textbuilder-rotated-fragments&#34;&gt;&lt;strong&gt;Implement Rotation using TextParagraph and TextBuilder (Rotated Fragments)&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RotateTextUsingParagraph-RotateTextUsingParagraph.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;implement-rotation-using-textfragment-and-pageparagraphs&#34;&gt;&lt;strong&gt;Implement Rotation using TextFragment and Page.Paragraphs&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RotateTextUsingTextFragmentAndParagraph-RotateTextUsingTextFragmentAndParagraph.cs&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;implement-rotation-using-textparagraph-and-textbuilder-whole-paragraph-rotated&#34;&gt;&lt;strong&gt;Implement Rotation using TextParagraph and TextBuilder (Whole Paragraph Rotated)&lt;/strong&gt;&lt;/h3&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-RotateTextUsingTextParagraphAndBuilder-RotateTextUsingTextParagraphAndBuilder.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Search and Get Text from Pages of a PDF Document</title>
      <link>https://docs.aspose.com/pdf/net/search-and-get-text-from-pages-of-a-pdf-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/search-and-get-text-from-pages-of-a-pdf-document/</guid>
      <description>
        
        
        &lt;h2 id=&#34;search-and-get-text-from-all-the-pages-of-pdf-document&#34;&gt;&lt;strong&gt;Search and Get Text from All the Pages of PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; class allows you to find text, matching a particular phrase, from all the pages of a PDF document. In order to search text from the whole document, you need to call the &lt;strong&gt;Accept&lt;/strong&gt; method of &lt;strong&gt;Pages&lt;/strong&gt; collection. The &lt;strong&gt;Accept&lt;/strong&gt; method takes &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; object as a parameter, which returns a collection of &lt;strong&gt;TextFragment&lt;/strong&gt; objects. You can loop through all the fragments and get their properties like &lt;strong&gt;Text&lt;/strong&gt;, &lt;strong&gt;Position&lt;/strong&gt; ( &lt;strong&gt;XIndent&lt;/strong&gt;, &lt;strong&gt;YIndent&lt;/strong&gt; ), &lt;strong&gt;FontName&lt;/strong&gt;, &lt;strong&gt;FontSize&lt;/strong&gt;, &lt;strong&gt;IsAccessible&lt;/strong&gt;, &lt;strong&gt;IsEmbedded&lt;/strong&gt;, &lt;strong&gt;IsSubset&lt;/strong&gt;, &lt;strong&gt;ForegroundColor&lt;/strong&gt; **, etc. 
The following code snippet shows you how to search for text from all the pages.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SearchAndGetTextAll-SearchAndGetTextAll.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In case you need to search text inside any particular PDF page, please specify the page number from pages collection of Document instance and call Accept method against that page (as shown in code line below).&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-ReplaceTextPage-SearchInsideText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;search-and-get-text-segments-from-all-pages-of-pdf-document&#34;&gt;&lt;strong&gt;Search and Get Text Segments from All Pages of PDF Document&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In order to search text segments from all the pages, you first need to get the &lt;strong&gt;TextFragment&lt;/strong&gt; objects from the document. &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; allows you to find text, matching a particular phrase, from all the pages of a PDF document. In order to search text from the whole document, you need to call the &lt;strong&gt;Accept&lt;/strong&gt; method of &lt;strong&gt;Pages&lt;/strong&gt; collection. The &lt;strong&gt;Accept&lt;/strong&gt; method takes &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; object as a parameter, which returns a collection of &lt;strong&gt;TextFragment&lt;/strong&gt; objects. 
Once the &lt;strong&gt;TextFragmentCollection&lt;/strong&gt; is fetched from the document, you need to loop through this collection and get &lt;strong&gt;TextSegmentCollection&lt;/strong&gt; of each &lt;strong&gt;TextFragment&lt;/strong&gt; object. After that, you can get all the properties of the individual &lt;strong&gt;TextSegment&lt;/strong&gt; object. 
The following code snippet shows you how to search text segments from all the pages.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SearchAndGetTextPage-SearchAndGetTextPage.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In order to search and get TextSegments from a particular page of PDF, you need to specify the particular page index when calling &lt;strong&gt;Accept(..)&lt;/strong&gt; method. Please take a look at the following code lines.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SearchTextSegmentsPage-textFragmentAbsorber.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;search-and-get-text-from-all-pages-using-regular-expression&#34;&gt;&lt;strong&gt;Search and Get Text from all pages using Regular Expression&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; helps you search and retrieve text, from all the pages, based on a regular expression. First, you need to pass a regular expression to &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; constructor as the phrase. After that, you have to set the &lt;strong&gt;TextSearchOptions&lt;/strong&gt; property of the &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; object. This property requires &lt;strong&gt;TextSearchOptions&lt;/strong&gt; object and you need to pass &lt;strong&gt;true&lt;/strong&gt; as a parameter to its constructor while creating new objects. As you want to retrieve matching text from all the pages, you need to call &lt;strong&gt;Accept&lt;/strong&gt; method of &lt;strong&gt;Pages&lt;/strong&gt; collection. &lt;strong&gt;TextFragmentAbsorber&lt;/strong&gt; returns a &lt;strong&gt;TextFragmentCollection&lt;/strong&gt; containing all the fragments matching the criteria specified by the regular expression. The following code snippet shows you how to search and get text from all the pages based on a regular expression.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SearchRegularExpression-SearchRegularExpression.cs&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-TextSegments-TextSegments.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;search-text-based-on-regex-and-add-hyperlink&#34;&gt;&lt;strong&gt;Search Text based on Regex and Add Hyperlink&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you want to add hyperlink over a text phrase based on regular expression, first find all the phrases matching that particular regular expression using TextFragmentAbsorber and add hyperlink over these phrases.&lt;/p&gt;
&lt;p&gt;To find a phrase and add hyperlink over it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pass the regular expression as a parameter to the TextFragmentAbsorber constructor.&lt;/li&gt;
&lt;li&gt;Create a TextSearchOptions object which specifies whether the regular expression is used or not.&lt;/li&gt;
&lt;li&gt;Get the matching phrases into TextFragments.&lt;/li&gt;
&lt;li&gt;Loop through the matches to get their rectangular dimensions, change the foreground color to blue (optional - to make it appear like a hyperlink and create a link using the PdfContentEditor class&amp;rsquo; CreateWebLink(..) method.&lt;/li&gt;
&lt;li&gt;Save the updated PDF using Save method of Document object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following code snippet shows you how to search text inside a PDF file using a regular expression and adding hyperlinks over the matches.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SearchTextAndAddHyperlink-SearchTextAndAddHyperlink.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;search-and-draw-rectangle-around-each-textfragment&#34;&gt;&lt;strong&gt;Search and Draw Rectangle around each TextFragment&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET supports the feature to search and get the coordinates of each character or text fragments. So in order to be certain about the coordinates being returned for each character, we may consider highlighting (adding rectangle) around each character.&lt;/p&gt;
&lt;p&gt;In case of a text paragraph, you may consider using some regular expression to determine the paragraph break and draw a rectangle around it. Please take a look at the following code snippet. The following code snippet gets coordinates of each character and creates a rectangle around each character.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-SearchTextAndDrawRectangle-SearchTextAndDrawRectangle.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;highlight-each-character-in-pdf-document&#34;&gt;&lt;strong&gt;Highlight each character in PDF document&lt;/strong&gt;&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;You can try searching for text in a document using Aspose.PDF and get the results online at this link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://products.aspose.app/pdf/search&#34;&gt;products.aspose.app/pdf/search&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Aspose.PDF for .NET supports the feature to search and get the coordinates of each character or text fragments. So in order to be certain about the coordinates being returned for each character, we may consider highlighting (adding rectangle) around each character. The following code snippet gets coordinates of each character and creates a rectangle around each character.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-HighlightCharacterInPDF-HighlightCharacterInPDF.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;add-and-search-hidden-text&#34;&gt;&lt;strong&gt;Add and Search Hidden Text&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes we want to add hidden text in a PDF document and then search hidden text and use its position for post-processing. For your convenience, Aspose.PDF for .NET provides these abilities. You can add hidden text during document generation. Also, you can find hidden text using TextFragmentAbsorber. To add hidden text ,set TextState.Invisible to &amp;lsquo;true&amp;rsquo; for the added text. TextFragmentAbsorber finds all text that matches the pattern (if specified). It is the default behavior that can&amp;rsquo;t be changed. In order to verify if the found text is actually invisible, the TextState.Invisible property can be used. The code snippet below shows how to use this feature. &lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-AddAndSearchHiddenText-AddAndSearchHiddenText.cs&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;searching-text-with-net-regex&#34;&gt;&lt;strong&gt;Searching Text With .NET Regex&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET provides the ability to search documents using the standard .NET Regex option. The TextFragmentAbsorber can be used for this purpose as shown in the code sample below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-com-gists/63473b1ba28e09e229cfbf4430eabd8a.js?file=Examples-CSharp-AsposePDF-Text-SearchTextWithDotNetRegex-SearchTextWithDotNetRegex.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Net: Determine Line Break</title>
      <link>https://docs.aspose.com/pdf/net/determine-line-break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/net/determine-line-break/</guid>
      <description>
        
        
        &lt;h2 id=&#34;track-line-breaking-of-multi-line-textfragment&#34;&gt;&lt;strong&gt;Track Line Breaking of Multi-Line TextFragment&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aspose.PDF for .NET offers logging (tracking) background processing (line breaking) of multi-line text fragments in text adding scenarios. You can use the GetNotifications() method of Page Class as follows, in order to track line breaking of text fragment:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/7e1330795d76012fcb04248bb81d45b3.js?file=Examples-CSharp-AsposePDF-Text-DetermineLineBreak-1.cs&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
  </channel>
</rss>
