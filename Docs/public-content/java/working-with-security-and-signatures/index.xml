<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation â€“ Working with Security and Signatures</title>
    <link>https://docs.aspose.com/pdf/java/working-with-security-and-signatures/</link>
    <description>Recent content in Working with Security and Signatures on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.aspose.com/pdf/java/working-with-security-and-signatures/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Java: Encrypt PDF document using Encryption Types</title>
      <link>https://docs.aspose.com/pdf/java/encrypt-pdf-document-using-encryption-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/java/encrypt-pdf-document-using-encryption-types/</guid>
      <description>
        
        
        &lt;p&gt;The &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document#encrypt-java.lang.String-java.lang.String-int-int-&#34;&gt;encrypt(..)&lt;/a&gt; method of the &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document&#34;&gt;Document&lt;/a&gt; object supports the feature to encrypt a PDF document. You can pass user password, owner password and permissions to the &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document#encrypt-java.lang.String-java.lang.String-int-int-&#34;&gt;encrypt(..)&lt;/a&gt; method. In addition to that, you can pass any value from &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/CryptoAlgorithm&#34;&gt;CryptoAlgorithm&lt;/a&gt; Enumeration. This enum provides different combinations of encryption algorithms and key sizes. Finally, save the encrypted PDF file using &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document#save--&#34;&gt;save(..)&lt;/a&gt; method of &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document&#34;&gt;Document&lt;/a&gt; object.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Please specify different user and owner passwords while encrypting the PDF document.
&lt;/div&gt;

&lt;p&gt;The following code snippet shows you how to encrypt the PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-NewDocumentObject-securityandsignatures-EncryptPDFDocumentUsingEncryptionTypes-.java&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Java: Decrypt PDF file using Owner Password</title>
      <link>https://docs.aspose.com/pdf/java/decrypt-pdf-file-using-owner-password/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/java/decrypt-pdf-file-using-owner-password/</guid>
      <description>
        
        
        

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

In order to decrypt the PDF file, you first need to create Document object and open the PDF using owner password. After that, you need to call &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document#decrypt--&#34;&gt;decrypt&lt;/a&gt; method of the &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document&#34;&gt;Document&lt;/a&gt; object. Finally, save the updated PDF file using save method of the &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document&#34;&gt;Document&lt;/a&gt; object.
&lt;/div&gt;

&lt;p&gt;The following code snippet shows you how to decrypt PDF file.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-NewDocumentObject-securityandsignatures-DecryptPDFFileUsingOwnerPassword-.java&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Java: Add Digital Signature to PDF file</title>
      <link>https://docs.aspose.com/pdf/java/add-digital-signature-to-pdf-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/java/add-digital-signature-to-pdf-file/</guid>
      <description>
        
        
        

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Aspose.PDF for Java makes it possible to digitally sign PDF files using the PdfFileSignature class. You can certify a PDF file with a PKCS1-Certificate.
&lt;/div&gt;

&lt;p&gt;When signing a PDF document using a signature, you basically confirm that its contents should remain &amp;ldquo;as is&amp;rdquo;. Consequently, any changes made afterwards invalidate the signature and thus, you know if the document has been altered. Certifying a document first, allows you to specify the changes that a user can make to the document without invalidating the certification.&lt;/p&gt;
&lt;p&gt;In other words, the document would still be considered to retain its integrity and the recipient could still trust the document. For further details, please visit Certifying and signing a PDF.&lt;/p&gt;
&lt;p&gt;To accomplish the above stated requirement, the following public API changes have been made.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;isCertified(&amp;hellip;) method is added to PdfFileSignature class.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-NewDocumentObject-securityandsignatures-AddDigitalSignatureToPDFFile-.java&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Java: Extract Image from Signature Field</title>
      <link>https://docs.aspose.com/pdf/java/extract-image-from-signature-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/java/extract-image-from-signature-field/</guid>
      <description>
        
        
        

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

Aspose.PDF for Java supports the feature to digitally sign PDF files using the SignatureField class and while signing the document, setting an image for SignatureAppearance. Now our API also provides the capability to extract the signature information as well as the image associated with the signature field.
&lt;/div&gt;

&lt;p&gt;In order to extract signature information, we have introduced the extractImage(..) method to the SignatureField class. Please take a look at the following code snippet which demonstrates the steps to extract an image from the SignatureField object:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-NewDocumentObject-securityandsignatures-ExtractingImageFromSignatureField-.java&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Java: Set Privileges on an Existing PDF File</title>
      <link>https://docs.aspose.com/pdf/java/set-privileges-on-an-existing-pdf-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/java/set-privileges-on-an-existing-pdf-file/</guid>
      <description>
        
        
        

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

To set privileges on a PDF file, create an object of the DocumentPrivilege class and specify the rights you want to apply to the document. Once the privileges have been defined, pass this object as an argument to the &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document&#34;&gt;Document&lt;/a&gt; object&amp;rsquo;s &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document#encrypt-java.lang.String-java.lang.String-com.aspose.pdf.facades.DocumentPrivilege-int-boolean-&#34;&gt;encrypt(..)&lt;/a&gt; method.
&lt;/div&gt;

&lt;p&gt;The following code snippet shows how to set the privileges of a PDF file. When viewing the output PDF&amp;rsquo;s security properties in Adobe Reader (after providing the password), they appear as in the screenshot below.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;img src=&#34;http://i.imgur.com/1WXaa4m.png&#34; alt=&#34;todo:image_alt_text&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Figure: Security properties&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-NewDocumentObject-securityandsignatures-SetPrivilegesOnAnExistingPDFFile-.java&#34;&gt;&lt;/script&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Java: Determine if the Source PDF file is Password Protected</title>
      <link>https://docs.aspose.com/pdf/java/determine-if-the-source-pdf-file-is-password-protected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.aspose.com/pdf/java/determine-if-the-source-pdf-file-is-password-protected/</guid>
      <description>
        
        
        &lt;p&gt;Aspose.PDF for Java provides great capabilities of dealing with PDF documents. When using &lt;a href=&#34;https://apireference.aspose.com/java/pdf/com.aspose.pdf/Document&#34;&gt;Document&lt;/a&gt; class of com.aspose.pdf package to open a PDF document which is password protected, we need to provide the password information as an argument to Document constructor and in case this information is not provided, an error message is generated. In fact when trying to open a PDF file with Document object, the constructor is trying to read the contents of PDF file and in case correct password is not provided, an error message is generated (it happens to prevent unauthorised access of document)&lt;/p&gt;
&lt;p&gt;When dealing with encrypted PDF files, you may come across the scenario where you would be interested to detect if a PDF has an open password and/or an edit password. Sometimes there are documents which do not require password information while opening them, but they require information in order to edit the contents of file.. So in order to fulfil the above requirements, PdfFileInfo class present under com.aspose.pdf.facades package provides the methods which can help in determining the required information.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-AsposePdf-SecurityAndSignatures-HowToDetermineIfTheSourcePDFIsPasswordProtected-HowToDetermineIfTheSourcePDFIsPasswordProtected.java&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;get-information-about-pdf-document-security&#34;&gt;&lt;strong&gt;Get information about PDF document security&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;PdfFileInfo contains three methods to get information about PDF document security.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;getPasswordType()&lt;/strong&gt; method returns PasswordType enumeration value:
&lt;ol&gt;
&lt;li&gt;PasswordType.None - document is not password protected&lt;/li&gt;
&lt;li&gt;PasswordType.User - document was opened with user (or document open) password&lt;/li&gt;
&lt;li&gt;PasswordType.Owner - document was opened with owner (or permissions, edit) password&lt;/li&gt;
&lt;li&gt;PasswordType.Inaccessible - document is password protected but password is needed to open it while invalid password (or no password) was supplied.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hasOpenPassword()&lt;/strong&gt; method is used to determine if input file requires password, when opening it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hasEditPassword()&lt;/strong&gt; method is used to determine if input file requires password to edit its contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-NewDocumentObject-HowToDetermineIfTheSourcePDFIsPasswordProtected-GetInformationAboutPDFDocumentSecurity.java&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;determine-correct-password-from-array&#34;&gt;&lt;strong&gt;Determine correct password from Array&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Sometimes there is a requirement to determine the correct password from array of passwords and open the document with correct password. The following code snippet demonstrates the steps to iterate through the array of passwords and try opening the document with correct password.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/aspose-pdf/474c352a71ac9477aa0d604fd32e1c6a.js?file=Examples-src-main-java-com-aspose-pdf-examples-NewDocumentObject-HowToDetermineIfTheSourcePDFIsPasswordProtected-DetermineCorrectPasswordFromArray.java&#34;&gt;&lt;/script&gt;


      </description>
    </item>
    
  </channel>
</rss>
